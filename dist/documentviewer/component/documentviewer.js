module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("/// <reference path=\"./references.d.ts\"/>\nvar DOMPurify = __webpack_require__(1);\n/**\n * A simple document viewer which maps field names to values\n */\nvar DocumentViewer = (function () {\n    /**\n     * Constructor for the DocumentViewer\n     */\n    function DocumentViewer(parentElement) {\n        this.element = $(DocumentViewer.template);\n        this.tableElement = this.element.find(\".table\");\n        parentElement.append(this.element);\n    }\n    Object.defineProperty(DocumentViewer.prototype, \"dimensions\", {\n        /**\n         * Sets the dimensions of the document viewer\n         */\n        set: function (dims) {\n            this.tableElement.css({ width: dims.width, height: dims.height });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DocumentViewer.prototype, \"data\", {\n        /**\n         * Sets the data o\n         */\n        set: function (data) {\n            this.tableElement.empty();\n            var error;\n            if (data.length === 1) {\n                var eles = data.map(function (doc) {\n                    var docEle = $(\"\\n                    <div class=\\\"document\\\">\\n                    </div>\\n                \".trim());\n                    docEle.append(doc.items.map(function (item) {\n                        var newEle = $(\"\\n                            <div>\\n                                <div class=\\\"column-label\\\">\" + item.name + \":&nbsp;</div>\\n                                <div class=\\\"contents \" + (item.type.html ? \"html\" : \"text\") + \"\\\"></div>\\n                            </div>\\n                        \");\n                        var contents = newEle.find('.contents');\n                        if (item.type.html) {\n                            contents.append(\"<div>\" + DOMPurify.sanitize(item.value, { SAFE_FOR_JQUERY: true }) + \"</div>\");\n                        }\n                        else {\n                            contents.text(item.value);\n                        }\n                        return newEle;\n                    }));\n                    return docEle;\n                });\n                this.tableElement.append(eles);\n            }\n            else if (data.length > 1) {\n                error = \"Too many documents, please limit the number of documents to a single document.\";\n            }\n            else {\n                error = \"No Results\";\n            }\n            this.tableElement.toggle(!error);\n            this.element.find(\".error\").text(error || \"\").toggle(!!error);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The html string template for this visual\n     */\n    DocumentViewer.template = \"\\n        <div>\\n            <div class=\\\"table\\\"></div>\\n            <div class=\\\"error\\\"></div>\\n        </div>\\n    \".trim();\n    return DocumentViewer;\n})();\nexports.DocumentViewer = DocumentViewer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./visuals/documentviewer/DocumentViewer.ts\n ** module id = 0\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./visuals/documentviewer/DocumentViewer.ts?");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n;(function (factory) {\n    'use strict';\n    /* global window: false, define: false, module: false */\n    var root = typeof window === 'undefined' ? null : window;\n\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return factory(root);\n        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof module !== 'undefined') {\n        module.exports = factory(root);\n    } else {\n        root.DOMPurify = factory(root);\n    }\n})(function factory(window) {\n    'use strict';\n\n    var DOMPurify = function DOMPurify(window) {\n        return factory(window);\n    };\n\n    /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */\n    DOMPurify.version = '0.7.3';\n\n    if (!window || !window.document || window.document.nodeType !== 9) {\n        // not running in a browser, provide a factory function\n        // so that you can pass your own Window\n        DOMPurify.isSupported = false;\n        return DOMPurify;\n    }\n\n    var document = window.document;\n    var originalDocument = document;\n    var DocumentFragment = window.DocumentFragment;\n    var HTMLTemplateElement = window.HTMLTemplateElement;\n    var NodeFilter = window.NodeFilter;\n    var NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap;\n    var Text = window.Text;\n    var Comment = window.Comment;\n    var DOMParser = window.DOMParser;\n\n    // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n    if (typeof HTMLTemplateElement === 'function') {\n        document = document.createElement('template').content.ownerDocument;\n    }\n    var implementation = document.implementation;\n    var createNodeIterator = document.createNodeIterator;\n    var getElementsByTagName = document.getElementsByTagName;\n    var createDocumentFragment = document.createDocumentFragment;\n    var importNode = originalDocument.importNode;\n\n    var hooks = {};\n\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n    DOMPurify.isSupported = typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;\n\n    /* Add properties to a lookup table */\n    var _addToSet = function _addToSet(set, array) {\n        var l = array.length;\n        while (l--) {\n            set[array[l]] = true;\n        }\n        return set;\n    };\n\n    /* Shallow clone an object */\n    var _cloneObj = function _cloneObj(object) {\n        var newObject = {};\n        var property;\n        for (property in object) {\n            if (object.hasOwnProperty(property)) {\n                newObject[property] = object[property];\n            }\n        }\n        return newObject;\n    };\n\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n\n    /* allowed element names */\n    var ALLOWED_TAGS = null;\n    var DEFAULT_ALLOWED_TAGS = _addToSet({}, [\n\n    // HTML\n    'a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr',\n\n    // SVG\n    'svg', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern',\n\n    // SVG Filters\n    'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'feSpecularLighting', 'feTile', 'feTurbulence',\n\n    //MathML\n    'math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmuliscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mpspace', 'msqrt', 'mystyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover',\n\n    //Text\n    '#text']);\n\n    /* Allowed attribute names */\n    var ALLOWED_ATTR = null;\n    var DEFAULT_ALLOWED_ATTR = _addToSet({}, [\n\n    // HTML\n    'accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'coords', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'span', 'srclang', 'start', 'src', 'step', 'style', 'summary', 'tabindex', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns',\n\n    // SVG\n    'accent-height', 'accumulate', 'additivive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'clip', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'mode', 'min', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'surfacescale', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'y', 'y1', 'y2', 'z', 'zoomandpan',\n\n    // MathML\n    'accent', 'accentunder', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'display', 'displaystyle', 'fence', 'frame', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset',\n\n    // XML\n    'xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n    var FORBID_TAGS = null;\n\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n    var FORBID_ATTR = null;\n\n    /* Decide if custom data attributes are okay */\n    var ALLOW_DATA_ATTR = true;\n\n    /* Output should be safe for jQuery's $() factory? */\n    var SAFE_FOR_JQUERY = false;\n\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n    var SAFE_FOR_TEMPLATES = false;\n\n    /* Specify template detection regex for SAFE_FOR_TEMPLATES mode */\n    var MUSTACHE_EXPR = /\\{\\{.*|.*\\}\\}/gm;\n    var ERB_EXPR = /<%.*|.*%>/gm;\n\n    /* Decide if document with <html>... should be returned */\n    var WHOLE_DOCUMENT = false;\n\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html string.\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n    var RETURN_DOM = false;\n\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html string */\n    var RETURN_DOM_FRAGMENT = false;\n\n    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n     * `Node` is imported into the current `Document`. If this flag is not enabled the\n     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n     * DOMPurify. */\n    var RETURN_DOM_IMPORT = false;\n\n    /* Output should be free from DOM clobbering attacks? */\n    var SANITIZE_DOM = true;\n\n    /* Keep element content when removing element? */\n    var KEEP_CONTENT = true;\n\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n    var FORBID_CONTENTS = _addToSet({}, ['audio', 'head', 'math', 'script', 'style', 'svg', 'video']);\n\n    /* Tags that are safe for data: URIs */\n    var DATA_URI_TAGS = _addToSet({}, ['audio', 'video', 'img', 'source']);\n\n    /* Keep a reference to config to pass to hooks */\n    var CONFIG = null;\n\n    /* Ideally, do not touch anything below this line */\n    /* ______________________________________________ */\n\n    var formElement = document.createElement('form');\n\n    /**\n     * _parseConfig\n     *\n     * @param  optional config literal\n     */\n    var _parseConfig = function _parseConfig(cfg) {\n        /* Shield configuration object from tampering */\n        if (typeof cfg !== 'object') {\n            cfg = {};\n        }\n\n        /* Set configuration parameters */\n        ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? _addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\n        ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? _addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\n        FORBID_TAGS = 'FORBID_TAGS' in cfg ? _addToSet({}, cfg.FORBID_TAGS) : {};\n        FORBID_ATTR = 'FORBID_ATTR' in cfg ? _addToSet({}, cfg.FORBID_ATTR) : {};\n        ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n        SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false\n        SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n        WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n        RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n        RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n        RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false\n        SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n        KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n        if (RETURN_DOM_FRAGMENT) {\n            RETURN_DOM = true;\n        }\n\n        /* Merge configuration parameters */\n        if (cfg.ADD_TAGS) {\n            if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n                ALLOWED_TAGS = _cloneObj(ALLOWED_TAGS);\n            }\n            _addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n        }\n        if (cfg.ADD_ATTR) {\n            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n                ALLOWED_ATTR = _cloneObj(ALLOWED_ATTR);\n            }\n            _addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n        }\n\n        /* Add #text in case KEEP_CONTENT is set to true */\n        if (KEEP_CONTENT) {\n            ALLOWED_TAGS['#text'] = true;\n        }\n\n        // Prevent further manipulation of configuration.\n        // Not available in IE8, Safari 5, etc.\n        if (Object && 'freeze' in Object) {\n            Object.freeze(cfg);\n        }\n\n        CONFIG = cfg;\n    };\n\n    /**\n      * _forceRemove\n      *\n      * @param  a DOM node\n      */\n    var _forceRemove = function _forceRemove(node) {\n        try {\n            node.parentNode.removeChild(node);\n        } catch (e) {\n            node.outerHTML = '';\n        }\n    };\n\n    /**\n      * _initDocument\n      *\n      * @param  a string of dirty markup\n      * @return a DOM, filled with the dirty markup\n      */\n    var _initDocument = function _initDocument(dirty) {\n        /* Create a HTML document using DOMParser */\n        var doc, body;\n        try {\n            doc = new DOMParser().parseFromString(dirty, 'text/html');\n        } catch (e) {}\n\n        /* Some browsers throw, some browsers return null for the code above\n           DOMParser with text/html support is only in very recent browsers. */\n        if (!doc) {\n            doc = implementation.createHTMLDocument('');\n            body = doc.body;\n            body.parentNode.removeChild(body.parentNode.firstElementChild);\n            body.outerHTML = dirty;\n        }\n\n        /* Work on whole document or just its body */\n        if (typeof doc.getElementsByTagName === 'function') {\n            return doc.getElementsByTagName(WHOLE_DOCUMENT ? 'html' : 'body')[0];\n        } else {\n            return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n        }\n    };\n\n    /**\n     * _createIterator\n     *\n     * @param  document/fragment to create iterator for\n     * @return iterator instance\n     */\n    var _createIterator = function _createIterator(root) {\n        return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {\n            return NodeFilter.FILTER_ACCEPT;\n        }, false);\n    };\n\n    /**\n     * _isClobbered\n     *\n     * @param  element to check for clobbering attacks\n     * @return true if clobbered, false if safe\n     */\n    var _isClobbered = function _isClobbered(elm) {\n        if (elm instanceof Text || elm instanceof Comment) {\n            return false;\n        }\n        if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function') {\n            return true;\n        }\n        return false;\n    };\n\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   node to check for permission to exist\n     * @return  true if node was killed, false if left alive\n     */\n    var _sanitizeElements = function _sanitizeElements(currentNode) {\n        /* Execute a hook if present */\n        _executeHook('beforeSanitizeElements', currentNode, null);\n\n        /* Check if element is clobbered or can clobber */\n        if (_isClobbered(currentNode)) {\n            _forceRemove(currentNode);\n            return true;\n        }\n\n        /* Now let's check the element's type and name */\n        var tagName = currentNode.nodeName.toLowerCase();\n\n        /* Execute a hook if present */\n        _executeHook('uponSanitizeElement', currentNode, {\n            tagName: tagName\n        });\n\n        /* Remove element if anything forbids its presence */\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n            /* Keep content except for black-listed elements */\n            if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {\n                try {\n                    currentNode.insertAdjacentHTML('AfterEnd', currentNode.innerHTML);\n                } catch (e) {}\n            }\n            _forceRemove(currentNode);\n            return true;\n        }\n\n        /* Convert markup to cover jQuery behavior */\n        if (SAFE_FOR_JQUERY && !currentNode.firstElementChild && (!currentNode.content || !currentNode.content.firstElementChild)) {\n            currentNode.innerHTML = currentNode.textContent.replace(/</g, '&lt;');\n        }\n\n        /* Sanitize element content to be template-safe */\n        if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n            /* Get the element's text content */\n            var content = currentNode.textContent;\n            content = content.replace(MUSTACHE_EXPR, ' ');\n            content = content.replace(ERB_EXPR, ' ');\n            currentNode.textContent = content;\n        }\n\n        /* Execute a hook if present */\n        _executeHook('afterSanitizeElements', currentNode, null);\n\n        return false;\n    };\n\n    var DATA_ATTR = /^data-[\\w.\\u00B7-\\uFFFF-]/;\n    var IS_SCRIPT_OR_DATA = /^(?:\\w+script|data):/i;\n    /* This needs to be extensive thanks to Webkit/Blink's behavior */\n    var ATTR_WHITESPACE = /[\\x00-\\x20\\xA0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g;\n\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param   node to sanitize\n     * @return  void\n     */\n    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n        /* Execute a hook if present */\n        _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n        var attributes = currentNode.attributes;\n\n        /* Check if we have attributes; if not we might have a text node */\n        if (!attributes) {\n            return;\n        }\n\n        var hookEvent = {\n            attrName: '',\n            attrValue: '',\n            keepAttr: true\n        };\n        var l = attributes.length;\n        var attr, name, value, lcName, idAttr;\n\n        /* Go backwards over all attributes; safely remove bad ones */\n        while (l--) {\n            attr = attributes[l];\n            name = attr.name;\n            value = attr.value;\n            lcName = name.toLowerCase();\n\n            /* Execute a hook if present */\n            hookEvent.attrName = lcName;\n            hookEvent.attrValue = value;\n            hookEvent.keepAttr = true;\n            _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n            value = hookEvent.attrValue;\n\n            /* Remove attribute */\n            // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to\n            // remove a \"name\" attribute from an <img> tag that has an \"id\"\n            // attribute at the time.\n            if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {\n                idAttr = attributes.id;\n                attributes = Array.prototype.slice.apply(attributes);\n                currentNode.removeAttribute('id');\n                currentNode.removeAttribute(name);\n                if (attributes.indexOf(idAttr) > l) {\n                    currentNode.setAttribute('id', idAttr.value);\n                }\n            } else {\n                // This avoids a crash in Safari v9.0 with double-ids.\n                // The trick is to first set the id to be empty and then to\n                // remove the attriubute\n                if (name === 'id') {\n                    currentNode.setAttribute(name, '');\n                }\n                currentNode.removeAttribute(name);\n            }\n\n            /* Did the hooks approve of the attribute? */\n            if (!hookEvent.keepAttr) {\n                continue;\n            }\n\n            /* Make sure attribute cannot clobber */\n            if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in window || value in document || value in formElement)) {\n                continue;\n            }\n\n            if (\n            /* Check the name is permitted */\n            (ALLOWED_ATTR[lcName] && !FORBID_ATTR[lcName] ||\n            /* Allow potentially valid data-* attributes\n               * At least one character after \"-\" (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n               * XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804) */\n            !SAFE_FOR_TEMPLATES && ALLOW_DATA_ATTR && DATA_ATTR.test(lcName)) && (\n            /* Get rid of script and data URIs */\n            !IS_SCRIPT_OR_DATA.test(value.replace(ATTR_WHITESPACE, '')) ||\n            /* Keep image data URIs alive if src is allowed */\n            lcName === 'src' && value.indexOf('data:') === 0 && DATA_URI_TAGS[currentNode.nodeName.toLowerCase()])) {\n                /* Handle invalid data-* attribute set by try-catching it */\n                try {\n                    /* Sanitize attribute content to be template-safe */\n                    if (SAFE_FOR_TEMPLATES) {\n                        value = value.replace(MUSTACHE_EXPR, ' ');\n                        value = value.replace(ERB_EXPR, ' ');\n                    }\n                    currentNode.setAttribute(name, value);\n                } catch (e) {}\n            }\n        }\n\n        /* Execute a hook if present */\n        _executeHook('afterSanitizeAttributes', currentNode, null);\n    };\n\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param  fragment to iterate over recursively\n     * @return void\n     */\n    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n        var shadowNode;\n        var shadowIterator = _createIterator(fragment);\n\n        /* Execute a hook if present */\n        _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n        while (shadowNode = shadowIterator.nextNode()) {\n            /* Execute a hook if present */\n            _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n            /* Sanitize tags and elements */\n            if (_sanitizeElements(shadowNode)) {\n                continue;\n            }\n\n            /* Deep shadow DOM detected */\n            if (shadowNode.content instanceof DocumentFragment) {\n                _sanitizeShadowDOM(shadowNode.content);\n            }\n\n            /* Check attributes, sanitize if necessary */\n            _sanitizeAttributes(shadowNode);\n        }\n\n        /* Execute a hook if present */\n        _executeHook('afterSanitizeShadowDOM', fragment, null);\n    };\n\n    /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode\n     */\n    var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n        if (!hooks[entryPoint]) {\n            return;\n        }\n\n        hooks[entryPoint].forEach(function (hook) {\n            hook.call(DOMPurify, currentNode, data, CONFIG);\n        });\n    };\n\n    /**\n     * sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String} dirty string\n     * @param {Object} configuration object\n     */\n    DOMPurify.sanitize = function (dirty, cfg) {\n        /* Make sure we have a string to sanitize.\n           DO NOT return early, as this will return the wrong type if\n           the user has requested a DOM object rather than a string */\n        if (!dirty) {\n            dirty = '';\n        }\n\n        /* Stringify, in case dirty is an array or other object */\n        if (typeof dirty !== 'string') {\n            dirty = dirty.toString();\n        }\n\n        /* Check we can run. Otherwise fall back or ignore */\n        if (!DOMPurify.isSupported) {\n            if (typeof window.toStaticHTML === 'object' || typeof window.toStaticHTML === 'function') {\n                return window.toStaticHTML(dirty);\n            }\n            return dirty;\n        }\n\n        /* Assign config vars */\n        _parseConfig(cfg);\n\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !WHOLE_DOCUMENT && dirty.indexOf('<') === -1) {\n            return dirty;\n        }\n\n        /* Initialize the document to work on */\n        var body = _initDocument(dirty);\n\n        /* Check we have a DOM node from the data */\n        if (!body) {\n            return RETURN_DOM ? null : '';\n        }\n\n        /* Get node iterator */\n        var currentNode;\n        var oldNode;\n        var nodeIterator = _createIterator(body);\n\n        /* Now start iterating over the created document */\n        while (currentNode = nodeIterator.nextNode()) {\n\n            /* Fix IE's strange behavior with manipulated textNodes #89 */\n            if (currentNode.nodeType === 3 && currentNode === oldNode) {\n                continue;\n            }\n\n            /* Sanitize tags and elements */\n            if (_sanitizeElements(currentNode)) {\n                continue;\n            }\n\n            /* Shadow DOM detected, sanitize it */\n            if (currentNode.content instanceof DocumentFragment) {\n                _sanitizeShadowDOM(currentNode.content);\n            }\n\n            /* Check attributes, sanitize if necessary */\n            _sanitizeAttributes(currentNode);\n\n            oldNode = currentNode;\n        }\n\n        /* Return sanitized string or DOM */\n        var returnNode;\n        if (RETURN_DOM) {\n\n            if (RETURN_DOM_FRAGMENT) {\n                returnNode = createDocumentFragment.call(body.ownerDocument);\n\n                while (body.firstChild) {\n                    returnNode.appendChild(body.firstChild);\n                }\n            } else {\n                returnNode = body;\n            }\n\n            if (RETURN_DOM_IMPORT) {\n                /* adoptNode() is not used because internal state is not reset\n                   (e.g. the past names map of a HTMLFormElement), this is safe\n                   in theory but we would rather not risk another attack vector.\n                   The state that is cloned by importNode() is explicitly defined\n                   by the specs. */\n                returnNode = importNode.call(originalDocument, returnNode, true);\n            }\n\n            return returnNode;\n        }\n\n        return WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n    };\n\n    /**\n     * addHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint\n     * @param {Function} hookFunction\n     */\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n        if (typeof hookFunction !== 'function') {\n            return;\n        }\n        hooks[entryPoint] = hooks[entryPoint] || [];\n        hooks[entryPoint].push(hookFunction);\n    };\n\n    /**\n     * removeHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint\n     * @return void\n     */\n    DOMPurify.removeHook = function (entryPoint) {\n        if (hooks[entryPoint]) {\n            hooks[entryPoint].pop();\n        }\n    };\n\n    /**\n     * removeHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint\n     * @return void\n     */\n    DOMPurify.removeHooks = function (entryPoint) {\n        if (hooks[entryPoint]) {\n            hooks[entryPoint] = [];\n        }\n    };\n\n    /**\n     * removeAllHooks\n     * Public method to remove all DOMPurify hooks\n     *\n     * @return void\n     */\n    DOMPurify.removeAllHooks = function () {\n        hooks = [];\n    };\n\n    return DOMPurify;\n});\n\n/*****************\n ** WEBPACK FOOTER\n ** ./visuals/documentviewer/purify.js\n ** module id = 1\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./visuals/documentviewer/purify.js?");

/***/ }
/******/ ]);
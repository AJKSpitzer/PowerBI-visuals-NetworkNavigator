module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("/// <reference path=\"../../base/references.d.ts\"/>\nvar EventEmitter_1 = __webpack_require__(2);\nvar Utils_1 = __webpack_require__(3);\nvar LineUpLib = __webpack_require__(1);\n/**\n * Thin wrapper around the lineup library\n */\nvar LineUp = (function () {\n    /**\n     * Constructor for the lineups\n     */\n    function LineUp(element) {\n        var _this = this;\n        /**\n         * The template for the grid\n         */\n        this.template = \"\\n        <div>\\n            <div class=\\\"grid\\\"></div>\\n        </div>\\n    \".trim();\n        /**\n         * A boolean indicating whehter or not we are currently loading more data\n         */\n        this.loadingMoreData = false;\n        this._settings = $.extend(true, {}, LineUp.DEFAULT_SETTINGS);\n        /**\n         * The configuration for the lineup viewer\n         */\n        this.lineUpConfig = {\n            svgLayout: {\n                mode: 'separate',\n                addPlusSigns: true,\n                plusSigns: {\n                    addStackedColumn: {\n                        name: \"Add a new Stacked Column\",\n                        action: \"addNewEmptyStackedColumn\",\n                        x: 0, y: 2,\n                        w: 21, h: 21 // LineUpGlobal.htmlLayout.headerHeight/2-4\n                    },\n                    addColumn: {\n                        title: \"Add a Column\",\n                        action: function () { return _this.lineup.addNewSingleColumnDialog(); },\n                        x: 0, y: 2,\n                        w: 21, h: 21 // LineUpGlobal.htmlLayout.headerHeight/2-4\n                    }\n                }\n            },\n            interaction: {\n                multiselect: function () { return _this.isMultiSelect; }\n            }\n        };\n        /**\n         * Returns true if the given object is numeric\n         */\n        this.isNumeric = function (obj) { return (obj - parseFloat(obj) + 1) >= 0; };\n        this.element = $(this.template);\n        this._eventEmitter = new EventEmitter_1.default();\n        element.append(this.element);\n    }\n    /**\n     * Loads the data into the lineup view\n     */\n    LineUp.prototype.loadData = function (columns, rows, force) {\n        if (force === void 0) { force = false; }\n        //derive a description file\n        var desc = this.deriveDesc(columns, rows);\n        var name = 'data';\n        this.loadDataImpl(name, desc, rows, force);\n        this.loadingMoreData = false;\n    };\n    Object.defineProperty(LineUp.prototype, \"events\", {\n        /**\n         * Gets the events object\n         */\n        get: function () {\n            return this._eventEmitter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineUp.prototype, \"settings\", {\n        /**\n         * Gets the settings\n         */\n        get: function () {\n            return this._settings;\n        },\n        /**\n         * Sets the settings\n         */\n        set: function (value) {\n            var newSettings = $.extend(true, {}, LineUp.DEFAULT_SETTINGS, value);\n            var singleSelect = newSettings.selection.singleSelect;\n            var multiSelect = newSettings.selection.multiSelect;\n            this.selectionEnabled = singleSelect || multiSelect;\n            this.isMultiSelect = multiSelect;\n            var loadData = newSettings.data.inferColumnTypes !== this.settings.data.inferColumnTypes;\n            this._settings = newSettings;\n            if (loadData && this.rows && this.rows.length) {\n                this.loadData(this.columns, this.rows, true);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineUp.prototype, \"selectionEnabled\", {\n        /**\n         * Getter for selection enabled\n         */\n        get: function () {\n            return this._selectionEnabled;\n        },\n        /**\n         * Setter for selectionEnabled\n         */\n        set: function (value) {\n            this._selectionEnabled = value;\n            this.attachEvents();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LineUp.prototype, \"isMultiSelect\", {\n        /**\n         * Getter for isMultiSelect\n         */\n        get: function () {\n            return this._isMultiSelect;\n        },\n        /**\n         * Setter for isMultiSelect\n         */\n        set: function (value) {\n            this._isMultiSelect = value;\n            this.attachEvents();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Loads the data into the lineup view\n     */\n    LineUp.prototype.loadDataImpl = function (name, desc, _data, force) {\n        if (force === void 0) { force = false; }\n        // Update the rendering options\n        if (this.lineup) {\n            var presProps = this.settings.presentation;\n            for (var key in presProps) {\n                if (presProps.hasOwnProperty(key)) {\n                    this.lineup.changeRenderingOption(key, presProps[key]);\n                }\n            }\n        }\n        /* Only reload lineup if we are forced to, if we haven't loaded lineup in the first place, or if the data has changed */\n        if (force || !this.lineup || Utils_1.default.hasDataChanged(this.lineup.storage.getData(), _data, function (a, b) { return a.equals(b); })) {\n            var spec = {};\n            spec.name = name;\n            spec.dataspec = desc;\n            delete spec.dataspec.file;\n            delete spec.dataspec.separator;\n            spec.dataspec.data = _data;\n            spec.storage = LineUpLib.createLocalStorage(_data, desc.columns, desc.layout, desc.primaryKey);\n            if (this.lineup) {\n                this.lineup.changeDataStorage(spec);\n            }\n            else {\n                var finalOptions = $.extend(true, this.lineUpConfig, { renderingOptions: this.settings.presentation });\n                this.lineup = LineUpLib.create(spec, d3.select(this.element.find('.grid')[0]), finalOptions);\n                var scrolled = this.lineup.scrolled;\n                var me = this;\n                // The use of `function` is intentional here, we need to pass along the correct scope\n                this.lineup.scrolled = function () {\n                    var args = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        args[_i - 0] = arguments[_i];\n                    }\n                    me.onLineUpScrolled.apply(me, args);\n                    return scrolled.apply(this, args);\n                };\n            }\n        }\n        this.lineup.select(_data.filter(function (n) { return n.selected; }));\n    };\n    /**\n     * Derives the desciption for the given column\n     */\n    LineUp.prototype.deriveDesc = function (columns, data, separator) {\n        var _this = this;\n        var cols = columns.map(function (col) {\n            var r = {\n                column: col.displayName,\n                type: 'string'\n            };\n            if (_this.settings.data.inferColumnTypes) {\n                var allNumeric = true;\n                var minMax = { min: Number.MAX_VALUE, max: 0 };\n                for (var i = 0; i < data.length; i++) {\n                    var value = data[i][r.column];\n                    if (value !== 0 && !!value && !_this.isNumeric(value)) {\n                        allNumeric = false;\n                        break;\n                    }\n                    else {\n                        if (+value > minMax.max) {\n                            minMax.max = value;\n                        }\n                        else if (+value < minMax.min) {\n                            minMax.min = +value;\n                        }\n                    }\n                }\n                if (allNumeric) {\n                    r.type = 'number';\n                    r.domain = [minMax.min, minMax.max];\n                }\n            }\n            else {\n                if (col.type.numeric) {\n                    r.type = 'number';\n                    r.domain = d3.extent(data, function (row) { return row[col.displayName] && row[col.displayName].length === 0 ? undefined : +(row[col.displayName]); });\n                }\n            }\n            // If is a string, try to see if it is a category\n            if (r.type === 'string') {\n                var sset = d3.set(data.map(function (row) { return row[col.displayName]; }));\n                if (sset.size() <= Math.max(20, data.length * 0.2)) {\n                    r.type = 'categorical';\n                    r.categories = sset.values().sort();\n                }\n            }\n            return r;\n        });\n        return {\n            separator: separator,\n            primaryKey: columns[0].displayName,\n            columns: cols\n        };\n    };\n    /**\n     * Listener for when the lineup viewer is scrolled\n     */\n    LineUp.prototype.onLineUpScrolled = function () {\n        // truthy this.dataView.metadata.segment means there is more data to be loaded\n        if (!this.loadingMoreData && this.raiseCanLoadMoreData()) {\n            var scrollElement = $(this.lineup.$container.node()).find('div.lu-wrapper')[0];\n            var scrollHeight = scrollElement.scrollHeight;\n            var top = scrollElement.scrollTop;\n            if (scrollHeight - (top + scrollElement.clientHeight) < 200 && scrollHeight >= 200) {\n                this.loadingMoreData = true;\n                this.raiseLoadMoreData();\n            }\n        }\n    };\n    /**\n     * Attaches the line up events to lineup\n     */\n    LineUp.prototype.attachEvents = function () {\n        var _this = this;\n        if (this.lineup) {\n            // Cleans up events\n            this.lineup.listeners.on(\"multiselected.lineup\", null);\n            this.lineup.listeners.on(\"selected.lineup\", null);\n            if (this.isMultiSelect) {\n                this.lineup.listeners.on(\"multiselected.lineup\", function (rows) { return _this.raiseSelectionChanged(rows); });\n            }\n            else {\n                this.lineup.listeners.on(\"selected.lineup\", function (row) { return _this.raiseSelectionChanged(row ? [row] : []); });\n            }\n        }\n    };\n    /**\n     * Raises the selection changed event\n     */\n    LineUp.prototype.raiseSelectionChanged = function (rows) {\n        this.events.raiseEvent('selectionChanged', rows);\n    };\n    /**\n     * Raises the load more data event\n     */\n    LineUp.prototype.raiseLoadMoreData = function () {\n        this.events.raiseEvent('loadMoreData');\n    };\n    /**\n     * Raises the can load more data event\n     */\n    LineUp.prototype.raiseCanLoadMoreData = function () {\n        var result = {\n            result: false\n        };\n        this.events.raiseEvent('canLoadMoreData', result);\n        return result.result;\n    };\n    /**\n     * Represents the settings\n     */\n    LineUp.DEFAULT_SETTINGS = {\n        selection: {\n            singleSelect: true,\n            multiSelect: true\n        },\n        data: {\n            inferColumnTypes: false\n        },\n        presentation: {\n            stacked: true,\n            values: false,\n            histograms: true,\n            animation: true\n        }\n    };\n    return LineUp;\n})();\nexports.LineUp = LineUp;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./visuals/lineup/LineUp.ts\n ** module id = 0\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./visuals/lineup/LineUp.ts?");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("/*! LineUpJS - v0.1.0 - 2015-07-08\n* https://github.com/Caleydo/lineup.js\n* Copyright (c) 2015 ; Licensed BSD */'use strict';(function(){function LineUpLoader(jQuery,d3,_){ /**\n * Constructor to Create a LineUp Visualization\n * @param spec - the specifications object\n * @param spec.storage - a LineUp Storage, see {@link LineUpLocalStorage}\n * @constructor\n */var LineUp;(function(LineUp,d3,$,undefined){function LineUpClass(spec,$container,config){var $defs,scroller;this.storage = spec.storage;this.spec = spec; //    this.sortedColumn = [];\nthis.$container = $container;this.tooltip = LineUp.createTooltip($container.node()); //trigger hover event\nthis.listeners = d3.dispatch('hover','change-sortcriteria','change-filter','selected','multiselected');this.config = $.extend(true,{},LineUp.defaultConfig,config,{ //TODO internal stuff, should to be extracted\ncolumnBundles:{primary:{sortedColumn:null,sortingOrderAsc:true,prevRowScale:null}}});this.storage.config = this.config;if(!this.config.svgLayout.addPlusSigns){this.config.svgLayout.plusSigns = {}; // empty plusSign if no plus signs needed\n} //create basic structure\nif(this.config.svgLayout.mode === 'combined'){ //within a single svg with 'fixed' header\n$container.classed('lu-mode-combined',true);this.$table = $container.append('svg').attr('class','lu');$defs = this.$table.append('defs');$defs.append('defs').attr('class','columnheader');$defs.append('defs').attr('class','column');$defs.append('defs').attr('class','overlay');this.$body = this.$table.append('g').attr('class','body').attr('transform','translate(0,' + this.config.htmlLayout.headerHeight + ')');this.$header = this.$table.append('g').attr('class','header');this.$bodySVG = this.$headerSVG = this.$table;scroller = this.initScrolling($($container.node()),this.config.htmlLayout.headerHeight);}else { //within two svgs with a dedicated header\n$container.classed('lu-mode-separate',true);this.$table = $container;this.$headerSVG = this.$table.append('svg').attr('class','lu lu-header');this.$headerSVG.attr('height',this.config.htmlLayout.headerHeight);this.$headerSVG.append('defs').attr('class','columnheader');this.$header = this.$headerSVG.append('g');this.$bodySVG = this.$table.append('div').attr('class','lu-wrapper').append('svg').attr('class','lu lu-body');$defs = this.$bodySVG.append('defs');$defs.append('defs').attr('class','column');$defs.append('defs').attr('class','overlay');this.$body = this.$bodySVG;scroller = this.initScrolling($($container.node()).find('div.lu-wrapper'),0);}this.selectVisible = scroller.selectVisible;this.onScroll = scroller.onScroll;this.$header.append('rect').attr({width:'100%',height:this.config.htmlLayout.headerHeight,fill:'lightgray'});this.$header.append('g').attr('class','main');this.$header.append('g').attr('class','overlay');this.headerUpdateRequired = true;this.stackedColumnModified = null;this.dragWeight = this.initDragging();return this;}LineUp.prototype = LineUpClass.prototype = $.extend(LineUpClass.prototype,LineUp.prototype);LineUp.create = function(storage,$container,options){if(!('storage' in storage)){ // TODO: was '!$.isPlainObject(storage)'\nstorage = {storage:storage};}var r=new LineUpClass(storage,$container,options);r.startVis();return r;};LineUp.prototype.scrolled = function(top,left){if(this.config.svgLayout.mode === 'combined'){ //in single svg mode propagate vertical shift\nthis.$header.attr('transform','translate(0,' + top + ')');}else { //in two svg mode propagate horizontal shift\nthis.$header.attr('transform','translate(' + -left + ',0)');}}; /**\n   * default config of LineUp with all available options\n   *\n   */LineUp.defaultConfig = {colorMapping:d3.map(),columnColors:d3.scale.category20(),grayColor:'#999999',numberformat:d3.format('.3n'),htmlLayout:{headerHeight:50,headerOffset:2,buttonTopPadding:10,labelLeftPadding:12,buttonRightPadding:15,buttonWidth:13},renderingOptions:{stacked:false,values:false,animation:true,histograms:false},svgLayout:{ /**\n       * mode of this lineup instance, either combined = a single svg with header and body combined or separate ... separate header and body\n       */mode:'combined', //modes: combined vs separate\nrowHeight:20,rowPadding:0.2, //padding for scale.rangeBands\nrowBarPadding:2, /**\n       * number of backup rows to keep to avoid updating on every small scroll thing\n       */backupScrollRows:4,animationDuration:1000,addPlusSigns:false,plusSigns:{addStackedColumn:{title:'add stacked column',action:'addNewEmptyStackedColumn',x:0,y:2,w:21,h:21 // LineUpGlobal.htmlLayout.headerHeight/2-4\n}},rowActions:[ /*{\n         name: 'explore',\n         icon: '\\uf067',\n         action: function(row) {\n         console.log(row);\n         }\n         }*/]}, /* enables manipulation features, remove column, reorder,... */manipulative:true,interaction:{ //enable the table tooltips\ntooltips:true,multiselect:function multiselect(){return false;},rangeselect:function rangeselect(){return false;}},filter:{skip:0,limit:Number.POSITIVE_INFINITY,filter:undefined}};LineUp.prototype.on = function(type,listener){if(arguments.length < 2){return this.listeners.on(type);}this.listeners.on(type,listener);return this;};LineUp.prototype.changeDataStorage = function(spec){ //    d3.select('#lugui-table-header-svg').selectAll().remove();\nthis.storage = spec.storage;this.storage.config = this.config;this.spec = spec;this.config.columnBundles.primary.sortedColumn = null;this.headerUpdateRequired = true;delete this.prevRowScale;this.startVis();}; /**\n   * change a rendering option\n   * @param option\n   * @param value\n   */LineUp.prototype.changeRenderingOption = function(option,value){var v=this.config.renderingOptions[option];if(v === value){return;}this.config.renderingOptions[option] = value;if(option === 'histograms'){if(value){this.storage.resortData({filteredChanged:true});}}this.updateAll(true);}; /**\n   * the function to start the LineUp visualization\n   */LineUp.prototype.startVis = function(){this.assignColors(this.storage.getRawColumns());this.headerUpdateRequired = true; //initial sort\nthis.storage.resortData({});this.updateAll();};LineUp.prototype.assignColors = function(columns){ //Color schemes are in config (.columnColors / .grayColor)\n// clear map\nvar config=this.config;config.colorMapping = d3.map();var colCounter=0;columns.forEach(function(d){if(d.color){config.colorMapping.set(d.id,d.color);}else if(d instanceof LineUp.LineUpStringColumn || d.id === 'rank'){ // gray columns are:\nconfig.colorMapping.set(d.id,config.grayColor);}else {config.colorMapping.set(d.id,config.columnColors(colCounter));colCounter++;}}); //console.log(config.colorMapping);\n};LineUp.prototype.updateAll = function(stackTransition,bundle){var that=this;function updateBundle(b){var cols=that.storage.getColumnLayout(b);that.updateHeader(cols);that.updateBody(cols,that.storage.getData(b),stackTransition || false);}if(bundle){updateBundle(bundle);}else {Object.keys(this.storage.bundles).forEach(updateBundle);}}; /**\n   * sort by a column given by name\n   * @param column\n   * @param asc\n   * @returns {boolean}\n   */LineUp.prototype.sortBy = function(column,asc){column = column || this.storage.primaryKey;asc = asc || false;var d=this.storage.getColumnByName(column);if(!d){return false;}var bundle=this.config.columnBundles[d.columnBundle];bundle.sortingOrderAsc = asc;bundle.sortedColumn = d;this.listeners['change-sortcriteria'](this,d,bundle.sortingOrderAsc);this.storage.resortData({column:d,asc:bundle.sortingOrderAsc});this.updateAll(false,d.columnBundle);}; /**\n   * toggles the stacked rendering of this table\n   */LineUp.prototype.toggleStackedRendering = function(){this.config.renderingOptions.stacked = !this.config.renderingOptions.stacked;this.updateAll(true);}; /**\n   * toggles whether values are rendered all the time\n   */LineUp.prototype.toggleValueRendering = function(){this.config.renderingOptions.values = !this.config.renderingOptions.values;this.updateAll(true);}; /**\n   * set the limits to simulate pagination, similar to SQL skip and limit\n   * @param skip start number\n   * @param limit number or rows\n   */LineUp.prototype.setLimits = function(skip,limit){this.config.filter.skip = skip;this.config.filter.limit = limit; //trigger resort to apply skip\nthis.storage.resortData({});this.updateAll();}; /**\n   * change the weights of the selected column\n   * @param column\n   * @param weights\n   * @returns {boolean}\n   */LineUp.prototype.changeWeights = function(column,weights){if(typeof column === 'string'){column = this.storage.getColumnByName(column);}column = column || this.config.columnBundles.primary.sortedColumn;var bundle=column.columnBundle;if(!(column instanceof LineUp.LayoutStackedColumn)){return false;}column.updateWeights(weights); //trigger resort\nif(column === this.config.columnBundles[bundle].sortedColumn){this.listeners['change-sortcriteria'](this,column,this.config.columnBundles[bundle]);this.storage.resortData({key:bundle});}this.updateAll(false,bundle);return true;}; /**\n     * manually change/set the filter of a column\n     * @param column\n     * @param filter\n     */LineUp.prototype.changeFilter = function(column,filter){if(typeof column === 'string'){column = this.storage.getColumnByName(column);}column.filter = filter;this.listeners['change-filter'](this,column);this.storage.resortData({filteredChanged:true});this.updateBody();}; /**\n   * destroys the DOM elements created by this lineup instance, this should be the last call to this lineup instance\n   */LineUp.prototype.destroy = function(){ //remove tooltip\nthis.tooltip.destroy();this.$container.selectAll('*').remove();if(this.config.svgLayout.mode === 'combined'){this.$container.off('scroll',this.onScroll);}};})(LineUp || (LineUp = {}),d3,jQuery); /*global d3, jQuery, _ */var LineUp;(function(LineUp,d3,$,_,undefined){function fixCSS(id){return id.replace(/[\\s!\\'#$%&'\\(\\)\\*\\+,\\.\\/:;<=>\\?\\@\\[\\\\\\]\\^`\\{\\|\\}~]/g,'_'); //replace non css stuff to _\n} /**\n   * The mother of all Columns\n   * @param desc The descriptor object\n   * @class\n   */function LineUpColumn(desc){this.column = desc.column;this.label = desc.label || desc.column;this.color = desc.color;this.id = fixCSS(desc.id || this.column);this.missingValue = desc.missingValue;this.layout = {};}LineUp.LineUpColumn = LineUpColumn;LineUpColumn.prototype = $.extend({},{},{getValue:function getValue(row){var r=row[this.column];if(typeof r === \"undefined\"){return this.missingValue;}return r;},getRawValue:function getRawValue(row){var r=this.getValue(row);if(typeof r === 'undefined'){return '';}return r;}});function isWildCard(v){return typeof v !== 'number' || isNaN(v);} /**\n   * A {@link LineUpColumn} implementation for Numbers\n   * @param desc The descriptor object\n   * @constructor\n   * @extends LineUpColumn\n   */function LineUpNumberColumn(desc,_,data){LineUpColumn.call(this,desc);this.domain = desc.domain || [NaN,NaN];this.range = desc.range || [0,1];if(typeof this.missingValue === \"undefined\"){this.missingValue = NaN;} //infer the min max\nvar that=this;if(isWildCard(this.domain[0]) || isWildCard(this.domain[1])){var minmax=d3.extent(data,function(row){return that.getValue(row);});if(isWildCard(this.domain[0])){this.domain[0] = minmax[0];}if(isWildCard(this.domain[1])){this.domain[1] = minmax[1];}}}LineUp.LineUpNumberColumn = LineUpNumberColumn;LineUpNumberColumn.prototype = $.extend({},LineUpColumn.prototype,{getValue:function getValue(row){var r=LineUpColumn.prototype.getValue.call(this,row);if(r === null || typeof r === 'undefined' || r === '' || r.toString().trim().length === 0){r = this.missingValue;}return +r;},getRawValue:function getRawValue(row){var r=LineUpColumn.prototype.getValue.call(this,row);if(isNaN(r)){return '';}return r;}}); /**\n   *A {@link LineUpColumn} implementation for Strings\n   * @param desc The description object\n   * @constructor\n   * @extends LineUpColumn\n   */function LineUpStringColumn(desc){LineUpColumn.call(this,desc);}LineUp.LineUpStringColumn = LineUpStringColumn;LineUpStringColumn.prototype = $.extend({},LineUpColumn.prototype,{}); /**\n   *A {@link LineUpColumn} implementation for Strings\n   * @param desc The description object\n   * @constructor\n   * @extends LineUpColumn\n   */function LineUpCategoricalColumn(desc,_,data){LineUpColumn.call(this,desc);this.categories = [];this.categoryColors = d3.scale.category10().range();var that=this;if(desc.categories){desc.categories.forEach(function(cat,i){if(typeof cat === 'string'){that.categories.push(cat);}else {that.categories.push(cat.name);that.categoryColors[i] = cat.color;}});}if(this.categories.length === 0){this.categories = d3.set(data.map(function(row){return that.getValue(row);})).values();this.categories.sort();}}LineUp.LineUpCategoricalColumn = LineUpCategoricalColumn;LineUpCategoricalColumn.prototype = $.extend({},LineUpColumn.prototype,{}); /**\n   *  --- FROM HERE ON ONLY Layout Columns ---\n   */function LayoutColumn(desc){var that=this;this.columnWidth = desc.width || 100;this.id = _.uniqueId(\"Column_\");this.filter = desc.filter;this.parent = desc.parent || null; // or null\nthis.columnBundle = \"primary\"; //define it here to have a dedicated this pointer\nthis.sortBy = function(a,b){a = that.getValue(a);b = that.getValue(b);return that.safeSortBy(a,b);};}LineUp.LayoutColumn = LayoutColumn;LayoutColumn.prototype = $.extend({},{},{setColumnWidth:function setColumnWidth(newWidth,ignoreParent){this.columnWidth = newWidth;if(!ignoreParent && this.parent){this.parent.updateWidthFromChild({id:this.id,newWidth:newWidth});}},getColumnWidth:function getColumnWidth(){return this.columnWidth;},prepare:function prepare() /*data*/{},safeSortBy:function safeSortBy(a,b){var an=typeof a === 'number' && isNaN(a);var bn=typeof b === 'number' && isNaN(b);if(an && bn){return 0;}if(an){return 1;}if(bn){return -1;}return d3.descending(a,b);},flattenMe:function flattenMe(array){array.push(this);},description:function description(){var res={};res.width = this.columnWidth;res.filter = this.filter;return res;},makeCopy:function makeCopy(){return new LayoutColumn(this.description());},isFiltered:function isFiltered(){return typeof this.filter !== 'undefined';},filterBy:function filterBy() /*row*/{return true;}});function LayoutSingleColumn(desc,rawColumns){LayoutColumn.call(this,desc);this.columnLink = desc.column;this.column = rawColumns.get(desc.column);this.id = fixCSS(_.uniqueId(this.columnLink + \"_\"));}LineUp.LayoutSingleColumn = LayoutSingleColumn;LayoutSingleColumn.prototype = $.extend({},LayoutColumn.prototype,{getValue:function getValue(row,mode){if(mode === 'raw'){return this.column.getRawValue(row);}return this.column.getValue(row);},getLabel:function getLabel(){return this.column.label;},getDataID:function getDataID(){return this.column.id;},description:function description(){var res=LayoutColumn.prototype.description.call(this);res.column = this.columnLink;return res;},makeCopy:function makeCopy(){var description=this.description();var lookup=d3.map();lookup.set(this.columnLink,this.column);var res=new LayoutSingleColumn(description,lookup);return res;}});function LayoutNumberColumn(desc,rawColumns){LayoutSingleColumn.call(this,desc,rawColumns); //from normalized value to width value\nthis.value2pixel = d3.scale.linear().domain([0,1]).range([0,this.columnWidth]);var d=desc.domain || this.column.domain;if(isWildCard(d[0])){d[0] = this.column.domain[0];}if(isWildCard(d[1])){d[1] = this.column.domain[1];}this.scale = d3.scale.linear().clamp(true).domain(d).range(desc.range || this.column.range);this.histgenerator = d3.layout.histogram();var that=this;this.histgenerator.range(this.scale.range());this.histgenerator.value(function(row){return that.getValue(row);});this.hist = [];}LineUp.LayoutNumberColumn = LayoutNumberColumn;LayoutNumberColumn.prototype = $.extend({},LayoutSingleColumn.prototype,{mapping:function mapping(newscale){if(arguments.length < 1){return this.scale;}this.scale = newscale.clamp(true);this.histgenerator.range(newscale.range());},originalMapping:function originalMapping(){return d3.scale.linear().clamp(true).domain(this.column.domain).range(this.column.range);},prepare:function prepare(data,showHistograms){if(!showHistograms){this.hist = [];return;} //remove all the direct values to save space\nthis.hist = this.histgenerator(data).map(function(bin){return {x:bin.x,dx:bin.dx,y:bin.y};});var max=d3.max(this.hist,function(d){return d.y;});this.hist.forEach(function(d){d.y /= max;});},binOf:function binOf(row){var v=this.getValue(row),i;for(i = this.hist.length - 1;i >= 0;--i) {var bin=this.hist[i];if(bin.x <= v && v <= bin.x + bin.dx){return i;}}return -1;},setColumnWidth:function setColumnWidth(newWidth,ignoreParent){this.value2pixel.range([0,newWidth]);LayoutSingleColumn.prototype.setColumnWidth.call(this,newWidth,ignoreParent);},getValue:function getValue(row,mode){if(mode === 'raw'){return this.column.getRawValue(row);}return this.scale(this.column.getValue(row));},getWidth:function getWidth(row){var r=this.getValue(row);if(isNaN(r) || typeof r === 'undefined'){return 0;}return this.value2pixel(r);},filterBy:function filterBy(row){var filter=this.filter;if(typeof filter === 'undefined' || !this.column){return true;}var r=this.getValue(row,'raw');if(typeof filter === 'number' && isNaN(filter)){return !isNaN(r);}else if(typeof filter === 'number'){return r >= filter;}else if(Array.isArray(filter)){return filter[0] <= r && r <= filter[1];}return true;},description:function description(){var res=LayoutColumn.prototype.description.call(this);res.column = this.columnLink;res.type = 'number';var a=this.scale.domain();var b=this.column.domain;if(a[0] !== b[0] || a[1] !== b[1]){res.domain = a;}a = this.scale.range();b = this.column.range;if(a[0] !== b[0] || a[1] !== b[1]){res.range = a;}return res;},makeCopy:function makeCopy(){var lookup=d3.map();lookup.set(this.columnLink,this.column);var res=new LayoutNumberColumn(this.description(),lookup);return res;}});function LayoutStringColumn(desc,rawColumns){LayoutSingleColumn.call(this,desc,rawColumns);}LineUp.LayoutStringColumn = LayoutStringColumn;LayoutStringColumn.prototype = $.extend({},LayoutSingleColumn.prototype,{filterBy:function filterBy(row){var filter=this.filter;if(typeof filter === 'undefined' || !this.column){return true;}var r=this.getValue(row);if(typeof r === 'boolean'){return r && r.trim().length > 0;}else if(typeof filter === 'string' && filter.length > 0){return r && r.toLowerCase().indexOf(filter.toLowerCase()) >= 0;}else if(filter instanceof RegExp){return r && r.match(filter);}return true;},makeCopy:function makeCopy(){var lookup=d3.map();lookup.set(this.columnLink,this.column);var res=new LayoutStringColumn(this.description(),lookup);return res;}});function LayoutCategoricalColumn(desc,rawColumns){LayoutSingleColumn.call(this,desc,rawColumns);}LineUp.LayoutCategoricalColumn = LayoutCategoricalColumn;LayoutCategoricalColumn.prototype = $.extend({},LayoutSingleColumn.prototype,{filterBy:function filterBy(row){var filter=this.filter;if(typeof filter === 'undefined' || !this.column){return true;}var r=this.getValue(row);if(Array.isArray(filter) && filter.length > 0){return filter.indexOf(r) >= 0;}else if(typeof filter === 'string' && filter.length > 0){return r && r.toLowerCase().indexOf(filter.toLowerCase()) >= 0;}else if(filter instanceof RegExp){return r && r.match(filter);}return true;},makeCopy:function makeCopy(){var lookup=d3.map();lookup.set(this.columnLink,this.column);var res=new LayoutCategoricalColumn(this.description(),lookup);return res;}});function LayoutCategoricalColorColumn(desc,rawColumns){LayoutSingleColumn.call(this,desc,rawColumns);}LineUp.LayoutCategoricalColorColumn = LayoutCategoricalColorColumn;LayoutCategoricalColorColumn.prototype = $.extend({},LayoutSingleColumn.prototype,{getColor:function getColor(row){var cat=this.getValue(row,'raw');if(cat === null || cat === ''){return null;}var index=this.column.categories.indexOf(cat);if(index < 0){return null;}return this.column.categoryColors[index];},filterBy:function filterBy(row){return LayoutCategoricalColumn.prototype.filterBy.call(this,row);},makeCopy:function makeCopy(){var lookup=d3.map();lookup.set(this.columnLink,this.column);var res=new LayoutCategoricalColorColumn(this.description(),lookup);return res;}});function LayoutRankColumn(desc,_dummy,_dummy2,storage){LayoutColumn.call(this,desc?desc:{},[]);this.columnWidth = desc?desc.width || 50:50;this.id = fixCSS(_.uniqueId('rank_')); //maps keys to ranks\nthis.values = d3.map();this.storage = storage;}LineUp.LayoutRankColumn = LayoutRankColumn;LayoutRankColumn.prototype = $.extend({},LayoutColumn.prototype,{setValue:function setValue(row,d){this.values.set(row[this.storage.primaryKey],d);},getValue:function getValue(row){return this.values.get(row[this.storage.primaryKey]);},filter:function filter(row){var r=this.getValue(row);if(typeof r === 'undefined'){return true;}else if(typeof this.filter === 'number'){return r >= this.filter;}else if(Array.isArray(this.filter)){return this.filter[0] <= r && r <= this.filter[1];}return true;},getLabel:function getLabel(){return 'Rank';},getDataID:function getDataID(){return this.id;},description:function description(){var res=LayoutColumn.prototype.description.call(this);res.type = 'rank';return res;},makeCopy:function makeCopy(){var description=this.description();var res=new LayoutRankColumn(description,null,null,this.column.storage);return res;}}); // TODO: maybe remove??\nfunction LayoutCompositeColumn(desc,rawColumns){LayoutColumn.call(this,desc,rawColumns);this.childrenLinks = desc.children || [];this.label = desc.label || this.id;}LineUp.LayoutCompositeColumn = LayoutCompositeColumn;LayoutCompositeColumn.prototype = $.extend({},LayoutColumn.prototype,{getDataID:function getDataID(){return this.id;},getLabel:function getLabel(){return this.label;}});function LayoutStackedColumn(desc,rawColumns,toLayoutColumn){LayoutCompositeColumn.call(this,desc,rawColumns);this.childrenWeights = [];this.childrenWidths = [];this.toLayoutColumn = toLayoutColumn;this.children = [];this.emptyColumns = [];this.scale = d3.scale.linear().domain([0,1]).range([0,this.columnWidth]);this.init(desc);var that=this;this.sortBy = function(a,b){var aAll=0;var bAll=0;that.children.forEach(function(d){aAll += d.getWidth(a);bAll += d.getWidth(b);});return that.safeSortBy(aAll,bAll);};}LineUp.LayoutStackedColumn = LayoutStackedColumn;LayoutStackedColumn.prototype = $.extend({},LayoutCompositeColumn.prototype,{getValue:function getValue(row){ // TODO: a caching strategy might work here\nvar that=this;var all=0;this.children.forEach(function(d,i){var r=d.getValue(row);if(isNaN(r) || typeof r === 'undefined'){r = 0;}all += r * that.childrenWeights[i];});return all;},init:function init(desc){var that=this;if(this.childrenLinks.length < 1){this.emptyColumns.push(new LayoutEmptyColumn({parent:that}));}else { // check if weights or width are given\nif(this.childrenLinks[0].hasOwnProperty(\"weight\")){this.childrenWeights = this.childrenLinks.map(function(d){return +(d.weight || 1);});this.scale.domain([0,d3.sum(this.childrenWeights)]);if(desc.hasOwnProperty('width')){ // if the stacked column has a width -- normalize to width\nthis.childrenWidths = this.childrenWeights.map(function(d){return that.scale(d);});}else { // if width was artificial set, approximate a total width of x*100\nthis.columnWidth = this.children.length * 100;this.scale.range([0,that.columnWidth]);}}else { // accumulate weights and map 100px to  weight 1.0\nthis.childrenWidths = this.childrenLinks.map(function(d){return +(d.width || 100);});this.childrenWeights = this.childrenWidths.map(function(d){return d / 100.0;});this.columnWidth = d3.sum(this.childrenWidths);this.scale.domain([0,d3.sum(this.childrenWeights)]).range([0,this.columnWidth]);}this.children = this.childrenLinks.map(function(d,i){d.width = that.childrenWidths[i];d.parent = that;return that.toLayoutColumn(d);});}},flattenMe:function flattenMe(array,spec){var addEmptyColumns=false;if(spec){addEmptyColumns = spec.addEmptyColumns || false;}array.push(this);this.children.forEach(function(d){d.flattenMe(array);});if(addEmptyColumns){this.emptyColumns.forEach(function(d){return d.flattenMe(array);});}},filterBy:function filterBy(row){if(typeof this.filter === 'undefined'){return true;}var val=this.getValue(row);if(typeof this.filter === 'number'){return val <= this.filter;}else if(Array.isArray(this.filter)){return this.filter[0] <= val && val <= this.filter[1];}return true;},updateWidthFromChild:function updateWidthFromChild(){var that=this; // adopt weight and global size\nthis.childrenWidths = this.children.map(function(d){return d.getColumnWidth();});this.childrenWeights = this.childrenWidths.map(function(d){return that.scale.invert(d);});this.columnWidth = d3.sum(this.childrenWidths);this.scale.range([0,this.columnWidth]);this.scale.domain([0,d3.sum(this.childrenWeights)]);},setColumnWidth:function setColumnWidth(newWidth){var that=this;this.columnWidth = newWidth;that.scale.range([0,this.columnWidth]);this.childrenWidths = this.childrenWeights.map(function(d){return that.scale(d);}); //        console.log(this.childrenWidths, this.childrenWeights);\nthis.children.forEach(function(d,i){return d.setColumnWidth(that.childrenWidths[i],true);});},updateWeights:function updateWeights(weights){this.childrenWeights = weights;this.scale.domain([0,d3.sum(this.childrenWeights)]);var that=this;this.childrenWidths = this.childrenWeights.map(function(d){return that.scale(d);});this.columnWidth = d3.sum(this.childrenWidths);this.children.forEach(function(d,i){return d.setColumnWidth(that.childrenWidths[i],true);}); //console.log(this.childrenWeights);\n//console.log(this.childrenWidths);\n},removeChild:function removeChild(child){var indexOfChild=this.children.indexOf(child);var that=this;this.childrenWeights.splice(indexOfChild,1);this.childrenWidths.splice(indexOfChild,1);this.columnWidth = d3.sum(this.childrenWidths);this.scale.range([0,this.columnWidth]);this.scale.domain([0,d3.sum(this.childrenWeights)]);this.children.splice(indexOfChild,1);child.parent = null;if(this.children.length < 1){this.emptyColumns = [new LineUp.LayoutEmptyColumn({parent:that})];this.columnWidth = 100;}},addChild:function addChild(child,targetChild,position){if(!(child instanceof LineUp.LayoutNumberColumn)){return false;}var targetIndex=0;if(targetChild instanceof LineUp.LayoutEmptyColumn){this.emptyColumns = [];}else {targetIndex = this.children.indexOf(targetChild);if(position === 'r'){targetIndex++;}}this.childrenWeights.splice(targetIndex,0,this.scale.invert(child.getColumnWidth()));this.childrenWidths.splice(targetIndex,0,child.getColumnWidth());this.columnWidth = d3.sum(this.childrenWidths);this.scale.range([0,this.columnWidth]);this.scale.domain([0,d3.sum(this.childrenWeights)]);child.parent = this;this.children.splice(targetIndex,0,child); //        console.log('added Child:',this.children[targetIndex]);\nreturn true;},description:function description(){var res=LayoutColumn.prototype.description.call(this);res.type = 'stacked';var that=this;res.children = this.children.map(function(d,i){var r=d.description();r.weight = that.childrenWeights[i];return r;});res.label = this.label;return res;},makeCopy:function makeCopy(){var that=this;var description=that.description();description.childrenLinks = [];var res=new LayoutStackedColumn(description,{},that.toLayoutColumn);res.children = that.children.map(function(d){return d.makeCopy();});res.children.forEach(function(d){d.parent = res;});res.childrenWeights = this.childrenWeights.slice(0);res.scale.domain([0,d3.sum(this.childrenWeights)]);res.childrenWidths = this.childrenWeights.map(function(d){return that.scale(d);});return res;}});function LayoutEmptyColumn(spec){LayoutColumn.call(this,spec,[]);this.id = _.uniqueId('empty_');this.label = '{empty}';this.columnWidth = 50;}LineUp.LayoutEmptyColumn = LayoutEmptyColumn;LayoutEmptyColumn.prototype = $.extend({},LayoutColumn.prototype,{getLabel:function getLabel(){return this.label;},getDataID:function getDataID(){return this.id;},getValue:function getValue(){return '';}});function LayoutActionColumn(spec){spec = spec || {};LayoutColumn.call(this,spec,[]);this.id = _.uniqueId('action_');this.label = '';this.columnWidth = spec.width || 50;}LineUp.LayoutActionColumn = LayoutActionColumn;LayoutActionColumn.prototype = $.extend({},LayoutColumn.prototype,{getLabel:function getLabel(){return this.label;},getDataID:function getDataID(){return this.id;},description:function description(){var res=LayoutColumn.prototype.description.call(this);res.type = 'actions';return res;},getValue:function getValue(){return '';}});})(LineUp || (LineUp = {}),d3,jQuery,_); /* global d3, jQuery, window, document */var LineUp;(function(LineUp,d3,$,undefined){LineUp.prototype = LineUp.prototype || {}; /**\n   * creates a simple popup window with a table\n   * @param title\n   * @param label optional if an input field is\n   * @param options optional options like the dimension of the popup\n   * @returns {{popup: *, table: *, remove: remove, onOK: onOK}}\n   */function createPopup(title,label,options){options = $.extend({},options,{x:+window.innerWidth / 2 - 100,y:100,width:400,height:200});var popupBG=d3.select(\"body\").append(\"div\").attr(\"class\",\"lu-popupBG\");var popup=d3.select(\"body\").append(\"div\").attr({\"class\":\"lu-popup\"}).style({left:options.x + \"px\",top:options.y + \"px\",width:options.width + \"px\",height:options.height + \"px\"}).html('<span style=\"font-weight: bold\">' + title + '</span>' + (label?'<input type=\"text\" id=\"popupInputText\" size=\"35\" value=\"' + label + '\"><br>':'') + '<div class=\"selectionTable\"></div>' + '<button class=\"cancel\"><i class=\"fa fa-times\"></i> cancel</button>' + '<button class=\"ok\"><i class=\"fa fa-check\"></i> ok</button>');var theTable=popup.select(\".selectionTable\").style({width:options.width - 10 + \"px\",height:options.height - 40 + \"px\"}).append(\"table\");popup.select(\".cancel\").on(\"click\",function(){popupBG.remove();popup.remove();});return {popup:popup,table:theTable,remove:function remove(){popup.remove();popupBG.remove();},onOK:function onOK(handler){return popup.select(\".ok\").on(\"click\",handler);}};}LineUp.prototype.addNewStackedColumnDialog = function(){var that=this;var popup=createPopup('add stacked column:','Stacked'); // list all data rows !\nvar trData=that.storage.getRawColumns().filter(function(d){return d instanceof LineUp.LineUpNumberColumn;}).map(function(d){return {d:d,isChecked:false,weight:1.0};});var trs=popup.table.selectAll(\"tr\").data(trData);trs.enter().append(\"tr\");trs.append(\"td\").attr(\"class\",\"checkmark\");trs.append(\"td\").attr(\"class\",\"datalabel\").style(\"opacity\",0.8).text(function(d){return d.d.label;});trs.append(\"td\").append(\"input\").attr({'class':\"weightInput\",type:\"text\",value:function value(d){return d.weight;},'disabled':true,size:5}).on(\"input\",function(d){d.weight = +this.value;redraw();});function redraw(){var trs=popup.table.selectAll(\"tr\").data(trData);trs.select(\".checkmark\").html(function(d){return d.isChecked?'<i class=\"fa fa-check-square-o\"></i>':'<i class=\"fa fa-square-o\"></i>';}).on(\"click\",function(d){d.isChecked = !d.isChecked;redraw();});trs.select(\".datalabel\").style(\"opacity\",function(d){return d.isChecked?\"1.0\":\".8\";});trs.select(\".weightInput\").attr('disabled',function(d){return d.isChecked?null:true;});}redraw();popup.onOK(function(){var name=document.getElementById(\"popupInputText\").value;if(name.length < 1){window.alert(\"name must not be empty\");return;} //console.log(name, trData);\nvar allChecked=trData.filter(function(d){return d.isChecked;}); //console.log(allChecked);\nvar desc={label:name,width:Math.max(allChecked.length * 100,100),children:allChecked.map(function(d){return {column:d.d.column,type:'number',weight:d.weight};})};that.storage.addStackedColumn(desc);popup.remove();that.headerUpdateRequired = true;that.updateAll();});};LineUp.prototype.addNewSingleColumnDialog = function(){var that=this;var popup=createPopup('add single columns',undefined); // list all data rows !\nvar trData=that.storage.getRawColumns() //        .filter(function(d){return (d instanceof LineUpNumberColumn);})\n.map(function(d){return {d:d,isChecked:false,weight:1.0};});var trs=popup.table.selectAll(\"tr\").data(trData);trs.enter().append(\"tr\");trs.append(\"td\").attr(\"class\",\"checkmark\");trs.append(\"td\").attr(\"class\",\"datalabel\").style(\"opacity\",0.8).text(function(d){return d.d.label;});function redraw(){var trs=popup.table.selectAll(\"tr\").data(trData);trs.select(\".checkmark\").html(function(d){return '<i class=\"fa fa-' + (d.isChecked?'check-':'') + 'square-o\"></i>';}).on(\"click\",function(d){d.isChecked = !d.isChecked;redraw();});trs.select(\".datalabel\").style(\"opacity\",function(d){return d.isChecked?\"1.0\":\".8\";});}redraw();popup.onOK(function(){var allChecked=trData.filter(function(d){return d.isChecked;}); //        console.log(allChecked);\n//        var desc = {\n//            label:name,\n//            width:(Math.max(allChecked.length*100,100)),\n//            children:allChecked.map(function(d){return {column: d.d.id, weight: d.weight};})\n//        }\nallChecked.forEach(function(d){that.storage.addSingleColumn({column:d.d.column});});popup.remove();that.headerUpdateRequired = true;that.updateAll();});};LineUp.prototype.reweightStackedColumnWidget = function(data,$table){var toWeight=function toWeight(d){return d.weight;};var predictScale=d3.scale.linear().domain([0,d3.max(data,toWeight)]).range([0,120]);var trs=$table.selectAll(\"tr\").data(data);var config=this.config;trs.enter().append(\"tr\"); //    trs.append(\"td\").attr(\"class\", \"checkmark\")\ntrs.append(\"td\").style({width:\"20px\"}).append(\"input\").attr({'class':\"weightInput\",type:\"text\",value:function value(d){return d.weight;},size:5}).on(\"input\",function(d){data[d.index].weight = +this.value;redraw();});trs.append(\"td\").append(\"div\").attr(\"class\",\"predictBar\").style({width:function width(d){return predictScale(d.weight) + \"px\";},height:20 + \"px\",\"background-color\":function backgroundColor(d){return config.colorMapping.get(d.dataID);}});trs.append(\"td\").attr(\"class\",\"datalabel\").text(function(d){return d.d;});function redraw(){var trs=$table.selectAll(\"tr\").data(data);predictScale.domain([0,d3.max(data,toWeight)]);trs.select(\".predictBar\").transition().style({width:function width(d){return predictScale(d.weight) + \"px\";}});}redraw();};LineUp.prototype.reweightStackedColumnDialog = function(col){var that=this;var popup=createPopup('re-weight column \"' + col.label + '\"',undefined); //console.log(col.childrenWeights);\n// list all data rows !\nvar trData=col.children.map(function(d,i){return {d:d.column.label,dataID:d.getDataID(),weight:+col.childrenWeights[i],index:i};});this.reweightStackedColumnWidget(trData,popup.table);popup.onOK(function(){popup.remove();that.changeWeights(col,trData.map(function(d){return d.weight;}));});};LineUp.prototype.openMappingEditor = function(selectedColumn,$button){var bak=selectedColumn.mapping(),original=selectedColumn.originalMapping();var that=this;var act=bak;var popup=d3.select(\"body\").append(\"div\").attr({\"class\":\"lu-popup\"}).style({left:+window.innerWidth / 2 - 100 + \"px\",top:100 + \"px\",width:\"420px\",height:\"470px\"}).html('<div style=\"font-weight: bold\"> change mapping: </div>' + '<div class=\"mappingArea\"></div>' + '<label><input type=\"checkbox\" id=\"filterIt\" value=\"filterIt\">Filter Outliers</label><br>' + '<button class=\"cancel\"><i class=\"fa fa-times\"></i> cancel</button>' + '<button class=\"reset\"><i class=\"fa fa-undo\"></i> revert</button>' + '<button class=\"ok\"><i class=\"fa fa-check\"></i> ok</button>');var $filterIt=popup.select('input').on('change',function(){applyMapping(act);});$filterIt.node().checked = Array.isArray(selectedColumn.filter);var access=function access(row){return +selectedColumn.getValue(row,'raw');};function applyMapping(newscale){act = newscale;selectedColumn.mapping(act);var val=$filterIt.node().checked;if(val){selectedColumn.filter = newscale.domain();}else {selectedColumn.filter = undefined;} //console.log(act.domain().toString(), act.range().toString());\n$button.classed('filtered',!isSame(act.range(),original.range()) || !isSame(act.domain(),original.domain()));that.listeners['change-filter'](that,selectedColumn);that.storage.resortData({filteredChanged:true});that.updateAll(true);}var editorOptions={callback:applyMapping,triggerCallback:'dragend'};var editor=LineUp.mappingEditor(bak,original.domain(),that.storage.rawdata,access,editorOptions);popup.select('.mappingArea').call(editor);function isSame(a,b){return $(a).not(b).length === 0 && $(b).not(a).length === 0;}popup.select(\".ok\").on(\"click\",function(){applyMapping(act);popup.remove();});popup.select('.cancel').on('click',function(){selectedColumn.mapping(bak);$button.classed('filtered',!isSame(bak.range(),original.range()) || !isSame(bak.domain(),original.domain()));popup.remove();});popup.select('.reset').on('click',function(){act = bak = original;applyMapping(original);editor = LineUp.mappingEditor(bak,original.domain(),that.storage.rawdata,access,editorOptions);popup.selectAll('.mappingArea *').remove();popup.select('.mappingArea').call(editor);});}; /**\n   * handles the rendering and action of StackedColumn options menu\n   * @param selectedColumn -- the stacked column\n   */LineUp.prototype.stackedColumnOptionsGui = function(selectedColumn){ //console.log(selectedColumn);\nvar config=this.config;var svgOverlay=this.$header.select('.overlay');var that=this; // remove when clicked on already selected item\nvar disappear=this.stackedColumnModified === selectedColumn;if(disappear){svgOverlay.selectAll('.stackedOption').remove();this.stackedColumnModified = null;return;}function removeStackedColumn(col){that.storage.removeColumn(col);that.headerUpdateRequired = true;that.updateAll();}function renameStackedColumn(col){var x=+window.innerWidth / 2 - 100;var y=+100;var popup=d3.select('body').append('div').attr({'class':'lu-popup'}).style({left:x + 'px',top:y + 'px',width:'200px',height:'70px'}).html('<div style=\"font-weight: bold\"> rename column: </div>' + '<input type=\"text\" id=\"popupInputText\" size=\"20\" value=\"' + col.label + '\"><br>' + '<button class=\"cancel\"><i class=\"fa fa-times\"></i> cancel</button>' + '<button class=\"ok\"><i class=\"fa fa-check\"></i> ok</button>');popup.select('.ok').on('click',function(){var newValue=document.getElementById('popupInputText').value;if(newValue.length > 0){col.label = newValue;that.updateHeader(that.storage.getColumnLayout(col.columnBundle));popup.remove();}else {window.alert('non empty string required');}});popup.select('.cancel').on('click',function(){popup.remove();});} // else:\nthis.stackedColumnModified = selectedColumn;var options=[{name:' remove',action:removeStackedColumn},{name:' rename',action:renameStackedColumn},{name:' re-weight',action:that.reweightStackedColumnDialog}];var menuLength=options.length * 100;var stackedOptions=svgOverlay.selectAll('.stackedOption').data([{d:selectedColumn,o:options}]);stackedOptions.exit().remove();var stackedOptionsEnter=stackedOptions.enter().append('g').attr({'class':'stackedOption','transform':function transform(d){return 'translate(' + (d.d.offsetX + d.d.columnWidth - menuLength) + ',' + (config.htmlLayout.headerHeight / 2 - 2) + ')';}});stackedOptionsEnter.append('rect').attr({x:0,y:0,width:menuLength,height:config.htmlLayout.headerHeight / 2 - 4});stackedOptionsEnter.selectAll('text').data(function(d){return d.o;}).enter().append('text').attr({x:function x(d,i){return i * 100 + 5;},y:config.htmlLayout.headerHeight / 4 - 2}).text(function(d){return d.name;});stackedOptions.selectAll('text').on('click',function(d){svgOverlay.selectAll('.stackedOption').remove();d.action.call(that,selectedColumn);});stackedOptions.transition().attr({'transform':function transform(d){return 'translate(' + (d.d.offsetX + d.d.columnWidth - menuLength) + ',' + (config.htmlLayout.headerHeight / 2 - 2) + ')';}});};LineUp.prototype.openCategoricalFilterPopup = function(column,$button){if(!(column instanceof LineUp.LayoutCategoricalColumn)){ //can't filter other than string columns\nreturn;}var bak=column.filter || [];var popup=d3.select('body').append('div').attr({'class':'lu-popup'}).style({left:+window.innerWidth / 2 - 100 + 'px',top:100 + 'px',width:400 + 'px',height:300 + 'px'}).html('<span style=\"font-weight: bold\">Edit Filter</span>' + '<form onsubmit=\"return false\">' + '<div class=\"selectionTable\"><table><thead><th></th><th>Category</th></thead><tbody></tbody></table></div>' + '<button class=\"ok\"><i class=\"fa fa-check\" title=\"ok\"></i></button>' + '<button class=\"cancel\"><i class=\"fa fa-times\" title=\"cancel\"></i></button>' + '<button class=\"reset\"><i class=\"fa fa-undo\" title=\"reset\"></i></button></form>');popup.select('.selectionTable').style({width:400 - 10 + 'px',height:300 - 40 + 'px'});var that=this; // list all data rows !\nvar trData=column.column.categories.map(function(d){return {d:d,isChecked:bak.length === 0 || bak.indexOf(d) >= 0};});var trs=popup.select('tbody').selectAll('tr').data(trData);trs.enter().append('tr');trs.append('td').attr('class','checkmark');trs.append('td').attr('class','datalabel').text(function(d){return d.d;});function redraw(){var trs=popup.select('tbody').selectAll('tr').data(trData);trs.select('.checkmark').html(function(d){return '<i class=\"fa fa-' + (d.isChecked?'check-':'') + 'square-o\"></i>';}).on('click',function(d){d.isChecked = !d.isChecked;redraw();});trs.select('.datalabel').style('opacity',function(d){return d.isChecked?'1.0':'.8';});}redraw();function updateData(filter){column.filter = filter;$button.classed('filtered',filter && filter.length > 0 && filter.length < column.column.categories.length);that.listeners['change-filter'](that,column);that.storage.resortData({filteredChanged:true});that.updateBody();}popup.select('.cancel').on('click',function(){updateData(bak);popup.remove();});popup.select('.reset').on('click',function(){trData.forEach(function(d){d.isChecked = true;});redraw();updateData(null);});popup.select('.ok').on('click',function(){var f=trData.filter(function(d){return d.isChecked;}).map(function(d){return d.d;});if(f.length === column.column.categories.length){f = [];}updateData(f);popup.remove();});};LineUp.prototype.openFilterPopup = function(column,$button){if(!(column instanceof LineUp.LayoutStringColumn)){ //can't filter other than string columns\nreturn;}var pos=$(this.$header.node()).offset();pos.left += column.offsetX;pos.top += column.offsetY;var bak=column.filter || '';var popup=d3.select('body').append('div').attr({'class':'lu-popup2'}).style({left:pos.left + 'px',top:pos.top + 'px'}).html('<form onsubmit=\"return false\"><input type=\"text\" id=\"popupInputText\" placeholder=\"containing...\" autofocus=\"true\" size=\"18\" value=\"' + bak + '\"><br>' + '<button class=\"ok\"><i class=\"fa fa-check\" title=\"ok\"></i></button>' + '<button class=\"cancel\"><i class=\"fa fa-times\" title=\"cancel\"></i></button>' + '<button class=\"reset\"><i class=\"fa fa-undo\" title=\"reset\"></i></button></form>');var that=this;function updateData(filter){column.filter = filter;$button.classed('filtered',filter && filter.length > 0);that.listeners['change-filter'](that,column);that.storage.resortData({filteredChanged:true});that.updateBody();}popup.select('.cancel').on('click',function(){document.getElementById('popupInputText').value = bak;updateData(bak);popup.remove();});popup.select('.reset').on('click',function(){document.getElementById('popupInputText').value = '';updateData(null);});popup.select('.ok').on('click',function(){updateData(document.getElementById('popupInputText').value);popup.remove();});};LineUp.createTooltip = function(container){var $container=$(container),$tooltip=$('<div class=\"lu-tooltip\"/>').appendTo($container);function showTooltip(content,xy){$tooltip.html(content).css({left:xy.x + 'px',top:xy.y + xy.height - $container.offset().top + 'px'}).fadeIn();var stickout=$(window).height() + $(window).scrollTop() <= xy.y + xy.height + $tooltip.height() - 20;var stickouttop=$(window).scrollTop() > xy.y - $tooltip.height();if(stickout && !stickouttop){ //if the bottom is not visible move it on top of the box\n$tooltip.css('top',xy.y - $tooltip.height() - $container.offset().top + 'px');}}function hideTooltip(){$tooltip.stop(true).hide();}function moveTooltip(xy){if(xy.x){$tooltip.css({left:xy.x + 'px'});}if(xy.y){$tooltip.css({top:xy.y - $container.offset().top + 'px'});}}function sizeOfTooltip(){return [$tooltip.width(),$tooltip.height()];}function destroyTooltip(){$tooltip.remove();}return {show:showTooltip,hide:hideTooltip,move:moveTooltip,size:sizeOfTooltip,destroy:destroyTooltip};};LineUp.prototype.initScrolling = function($container,topShift){var that=this,container=$container[0],rowHeight=this.config.svgLayout.rowHeight,prevScrollTop=container.scrollTop,jbody=$(this.$table.node()),backupRows=this.config.svgLayout.backupScrollRows,shift;function onScroll(){var act=container.scrollTop;var left=container.scrollLeft; //at least one row changed\nthat.scrolled(act,left);if(Math.abs(prevScrollTop - act) >= rowHeight * backupRows){prevScrollTop = act;that.updateBody();}}$container.on('scroll',onScroll); //the shift between the scroll container our svg body\nshift = jbody.offset().top - $container.offset().top + topShift; //use a resize sensor of a utility lib to also detect resize changes\n//new ResizeSensor($container, function() {\n//  console.log(container.scrollHeight, container.scrollTop, $container.innerHeight(), $container.height(), 'resized');\n//  that.updateBody();\n//});\nfunction selectVisibleRows(data,rowScale){var top=container.scrollTop - shift,bottom=top + $container.innerHeight(),i=0,j; /*console.log(window.matchMedia('print').matches, window.matchMedia('screen').matches, top, bottom);\n      if (typeof window.matchMedia === 'function' && window.matchMedia('print').matches) {\n        console.log('show all');\n        return [0, data.length];\n      }*/if(top > 0){i = Math.round(top / rowHeight); //count up till really even partial rows are visible\nwhile(i >= 0 && rowScale(data[i + 1]) > top) {i--;}i -= backupRows; //one more row as backup for scrolling\n}{ //some parts from the bottom aren't visible\nj = Math.round(bottom / rowHeight); //count down till really even partial rows are visible\nwhile(j <= data.length && rowScale(data[j - 1]) < bottom) {j++;}j += backupRows; //one more row as backup for scrolling\n}return [Math.max(i,0),Math.min(j,data.length)];}return {selectVisible:selectVisibleRows,onScroll:onScroll};};LineUp.prototype.initDragging = function(){var that=this; /*\n     * define dragging behaviour for header weights\n     * */function dragWeightStarted(){d3.event.sourceEvent.stopPropagation();d3.select(this).classed('dragging',true);}function draggedWeight(){var newValue=Math.max(d3.mouse(this.parentNode)[0],2);that.reweightHeader({column:d3.select(this).data()[0],value:newValue});that.updateBody(that.storage.getColumnLayout(),that.storage.getData(),false);}function dragWeightEnded(){d3.select(this).classed('dragging',false);if(that.config.columnBundles.primary.sortedColumn instanceof LineUp.LayoutStackedColumn){that.listeners['change-sortcriteria'](that,that.config.columnBundles.primary.sortedColumn);that.storage.resortData({column:that.config.columnBundles.primary.sortedColumn});that.updateBody(that.storage.getColumnLayout(),that.storage.getData(),false);} //        that.updateBody(that.storage.getColumnLayout(), that.storage.getData())\n//      that.updateAll();\n// TODO: integrate columnbundles dynamically !!\n}return d3.behavior.drag().origin(function(d){return d;}).on('dragstart',dragWeightStarted).on('drag',draggedWeight).on('dragend',dragWeightEnded);};})(LineUp || (LineUp = {}),d3,jQuery); /* global d3, jQuery */var LineUp;(function(LineUp,d3,$){'use strict';function addLine($svg,x1,y1,x2,y2,clazz){return $svg.append(\"line\").attr({x1:x1,y1:y1,x2:x2,y2:y2,'class':clazz});}function addText($svg,x,y,text,dy,clazz){dy = dy || null;clazz = clazz || null;return $svg.append(\"text\").attr({x:x,y:y,dy:dy,'class':clazz}).text(text);}function addCircle($svg,x,shift,y,radius){shift -= x;return $svg.append(\"circle\").attr({'class':'handle',r:radius,cx:x,cy:y,transform:'translate(' + shift + ',0)'});}LineUp.mappingEditor = function(scale,dataDomain,data,data_accessor,options){options = $.extend({width:400,height:400,padding:50,radius:10,callback:$.noop,callbackThisArg:null,triggerCallback:'change' //change, dragend\n},options);var editor=function editor($root){var $svg=$root.append('svg').attr({'class':'lugui-me',width:options.width,height:options.height}); //left limit for the axes\nvar lowerLimitX=options.padding; //right limit for the axes\nvar upperLimitX=options.width - options.padding; //location for the score axis\nvar scoreAxisY=options.padding; //location for the raw2pixel value axis\nvar raw2pixelAxisY=options.height - options.padding; //this is needed for filtering the shown datalines\nvar raw2pixel=d3.scale.linear().domain(dataDomain).range([lowerLimitX,upperLimitX]);var normal2pixel=d3.scale.linear().domain([0,1]).range([lowerLimitX,upperLimitX]); //x coordinate for the score axis lower bound\nvar lowerNormalized=normal2pixel(scale.range()[0]); //x coordinate for the score axis upper bound\nvar upperNormalized=normal2pixel(scale.range()[1]); //x coordinate for the raw2pixel axis lower bound\nvar lowerRaw=raw2pixel(scale.domain()[0]); //x coordinate for the raw2pixel axis upper bound\nvar upperRaw=raw2pixel(scale.domain()[1]);scale = d3.scale.linear().clamp(true).domain(scale.domain()).range([lowerNormalized,upperNormalized]);var $base=$svg.append('g'); //upper axis for scored values\naddLine($base,lowerLimitX,scoreAxisY,upperLimitX,scoreAxisY,'axis'); //label for minimum scored value\naddText($base,lowerLimitX,scoreAxisY - 25,0,'.75em'); //label for maximum scored value\naddText($base,upperLimitX,scoreAxisY - 25,1,'.75em');addText($base,options.width / 2,scoreAxisY - 25,'Score','.75em','centered'); //lower axis for raw2pixel values\naddLine($base,lowerLimitX,raw2pixelAxisY,upperLimitX,raw2pixelAxisY,'axis'); //label for minimum raw2pixel value\naddText($base,lowerLimitX,raw2pixelAxisY + 20,dataDomain[0],'.75em'); //label for maximum raw2pixel value\naddText($base,upperLimitX,raw2pixelAxisY + 20,dataDomain[1],'.75em');addText($base,options.width / 2,raw2pixelAxisY + 20,'Raw','.75em','centered'); //lines that show mapping of individual data items\nvar datalines=$svg.append('g').classed('data',true).selectAll('line').data(data);datalines.enter().append('line').attr({x1:function x1(d){return scale(data_accessor(d));},y1:scoreAxisY,x2:function x2(d){return raw2pixel(data_accessor(d));},y2:raw2pixelAxisY}).style('visibility',function(d){var a;if(lowerRaw < upperRaw){a = raw2pixel(data_accessor(d)) < lowerRaw || raw2pixel(data_accessor(d)) > upperRaw;}else {a = raw2pixel(data_accessor(d)) > lowerRaw || raw2pixel(data_accessor(d)) < upperRaw;}return a?'hidden':null;}); //line that defines lower bounds for the scale\nvar mapperLineLowerBounds=addLine($svg,lowerNormalized,scoreAxisY,lowerRaw,raw2pixelAxisY,'bound'); //line that defines upper bounds for the scale\nvar mapperLineUpperBounds=addLine($svg,upperNormalized,scoreAxisY,upperRaw,raw2pixelAxisY,'bound'); //label for lower bound of normalized values\nvar lowerBoundNormalizedLabel=addText($svg,lowerLimitX + 5,scoreAxisY - 15,d3.round(normal2pixel.invert(lowerNormalized),2),'.25em','drag').attr('transform','translate(' + (lowerNormalized - lowerLimitX) + ',0)'); //label for lower bound of raw2pixel values\nvar lowerBoundRawLabel=addText($svg,lowerLimitX + 5,raw2pixelAxisY - 15,d3.round(raw2pixel.invert(lowerRaw),2),'.25em','drag').attr('transform','translate(' + (lowerRaw - lowerLimitX) + ',0)'); //label for upper bound of normalized values\nvar upperBoundNormalizedLabel=addText($svg,upperLimitX + 5,scoreAxisY - 15,d3.round(normal2pixel.invert(upperNormalized),2),'.25em','drag').attr('transform','translate(' + (upperNormalized - upperLimitX) + ',0)'); //label for upper bound of raw2pixel values\nvar upperBoundRawLabel=addText($svg,upperLimitX + 5,raw2pixelAxisY - 15,d3.round(raw2pixel.invert(upperRaw),2),'.25em','drag').attr('transform','translate(' + (upperRaw - upperLimitX) + ',0)');function createDrag(label,move){return d3.behavior.drag().on('dragstart',function(){d3.select(this).classed('dragging',true).attr('r',options.radius * 1.1);label.style('visibility','visible');}).on('drag',move).on('dragend',function(){d3.select(this).classed('dragging',false).attr('r',options.radius);label.style('visibility',null);updateScale(true);}).origin(function(){var t=d3.transform(d3.select(this).attr('transform'));return {x:t.translate[0],y:t.translate[1]};});}function updateNormalized(){scale.range([lowerNormalized,upperNormalized]);datalines.attr('x1',function(d){return scale(data_accessor(d));});updateScale();}function updateRaw(){var hiddenDatalines,shownDatalines;if(lowerRaw < upperRaw){hiddenDatalines = datalines.filter(function(d){return raw2pixel(data_accessor(d)) < lowerRaw || raw2pixel(data_accessor(d)) > upperRaw;});shownDatalines = datalines.filter(function(d){return !(raw2pixel(data_accessor(d)) < lowerRaw || raw2pixel(data_accessor(d)) > upperRaw);});}else {hiddenDatalines = datalines.filter(function(d){return raw2pixel(data_accessor(d)) > lowerRaw || raw2pixel(data_accessor(d)) < upperRaw;});shownDatalines = datalines.filter(function(d){return !(raw2pixel(data_accessor(d)) > lowerRaw || raw2pixel(data_accessor(d)) < upperRaw);});}hiddenDatalines.style('visibility','hidden');scale.domain([raw2pixel.invert(lowerRaw),raw2pixel.invert(upperRaw)]);shownDatalines.style('visibility',null).attr('x1',function(d){return scale(data_accessor(d));});updateScale();} //draggable circle that defines the lower bound of normalized values\naddCircle($svg,lowerLimitX,lowerNormalized,scoreAxisY,options.radius).call(createDrag(lowerBoundNormalizedLabel,function(){if(d3.event.x >= 0 && d3.event.x <= upperLimitX - lowerLimitX){mapperLineLowerBounds.attr('x1',lowerLimitX + d3.event.x);d3.select(this).attr('transform','translate(' + d3.event.x + ', 0)');lowerNormalized = d3.event.x + lowerLimitX;lowerBoundNormalizedLabel.text(d3.round(normal2pixel.invert(lowerNormalized),2)).attr('transform','translate(' + d3.event.x + ', 0)');updateNormalized();}})); //draggable circle that defines the upper bound of normalized values\naddCircle($svg,upperLimitX,upperNormalized,scoreAxisY,options.radius).call(createDrag(upperBoundNormalizedLabel,function(){if(d3.event.x >= -1 * (upperLimitX - lowerLimitX) && d3.event.x <= 0){mapperLineUpperBounds.attr('x1',upperLimitX + d3.event.x);d3.select(this).attr('transform','translate(' + d3.event.x + ', 0)');upperNormalized = d3.event.x + upperLimitX;upperBoundNormalizedLabel.text(d3.round(normal2pixel.invert(upperNormalized),2)).attr('transform','translate(' + d3.event.x + ', 0)');updateNormalized();}})); //draggable circle that defines the lower bound of raw2pixel values\naddCircle($svg,lowerLimitX,lowerRaw,raw2pixelAxisY,options.radius).call(createDrag(lowerBoundRawLabel,function(){if(d3.event.x >= 0 && d3.event.x <= upperLimitX - lowerLimitX){mapperLineLowerBounds.attr('x2',lowerLimitX + d3.event.x);d3.select(this).attr('transform','translate(' + d3.event.x + ', 0)');lowerRaw = d3.event.x + lowerLimitX;lowerBoundRawLabel.text(d3.round(raw2pixel.invert(lowerRaw),2)).attr('transform','translate(' + d3.event.x + ', 0)');updateRaw();}})); //draggable circle that defines the upper bound of raw2pixel values\naddCircle($svg,upperLimitX,upperRaw,raw2pixelAxisY,options.radius).call(createDrag(upperBoundRawLabel,function(){if(d3.event.x >= -1 * (upperLimitX - lowerLimitX) && d3.event.x <= 0){mapperLineUpperBounds.attr('x2',upperLimitX + d3.event.x);d3.select(this).attr('transform','translate(' + d3.event.x + ', 0)');upperRaw = d3.event.x + upperLimitX;upperBoundRawLabel.text(d3.round(raw2pixel.invert(upperRaw),2)).attr('transform','translate(' + d3.event.x + ', 0)');updateRaw();}}));function updateScale(isDragEnd){if(isDragEnd !== (options.triggerCallback === 'dragend')){return;}var newScale=d3.scale.linear().domain([raw2pixel.invert(lowerRaw),raw2pixel.invert(upperRaw)]).range([normal2pixel.invert(lowerNormalized),normal2pixel.invert(upperNormalized)]);options.callback.call(options.callbackThisArg,newScale);}};return editor;};})(LineUp || (LineUp = {}),d3,jQuery); /* global d3, jQuery, _ */var LineUp;(function(LineUp,d3,$,_,undefined){function bundleSetter(bundle){return function setBundle(col){col.columnBundle = bundle;if(col instanceof LineUp.LayoutStackedColumn){col.children.forEach(setBundle);}};} /**\n   * An implementation of data storage for reading locally\n   * @param tableId\n   * @param data\n   * @param columns\n   * @param config\n   * @class\n   */function LineUpLocalStorage(data,columns,layout,primaryKey,storageConfig){this.storageConfig = $.extend(true,{},{colTypes:{'number':LineUp.LineUpNumberColumn,'string':LineUp.LineUpStringColumn,'categorical':LineUp.LineUpCategoricalColumn},layoutColumnTypes:{'number':LineUp.LayoutNumberColumn,'single':LineUp.LayoutStringColumn,'string':LineUp.LayoutStringColumn,'categorical':LineUp.LayoutCategoricalColumn,'categoricalcolor':LineUp.LayoutCategoricalColorColumn,'stacked':LineUp.LayoutStackedColumn,'rank':LineUp.LayoutRankColumn,'actions':LineUp.LayoutActionColumn}},storageConfig);this.config = null; //will be injected by lineup\nvar colTypes=this.storageConfig.colTypes;var layoutColumnTypes=this.storageConfig.layoutColumnTypes;var that=this;function toColumn(desc){return new colTypes[desc.type](desc,toColumn,data);}this.storageConfig.toColumn = toColumn;this.primaryKey = primaryKey;this.rawdata = data;this.selected = d3.set();this.rawcols = columns.map(toColumn);this.layout = layout || LineUpLocalStorage.generateDefaultLayout(this.rawcols);var colLookup=d3.map();this.rawcols.forEach(function(col){colLookup.set(col.column,col);});function toLayoutColumn(desc){var type=desc.type || 'single';if(type === 'single'){var col=colLookup.get(desc.column);if(col instanceof LineUp.LineUpNumberColumn){type = 'number';}else if(col instanceof LineUp.LineUpCategoricalColumn){type = 'categorical';}}return new layoutColumnTypes[type](desc,colLookup,toLayoutColumn,that);}this.storageConfig.toLayoutColumn = toLayoutColumn;var bundles=this.bundles = {};Object.keys(this.layout).forEach(function(l){bundles[l] = {layoutColumns:[],needsLayout:true, // this triggers the layout generation at first access to \"getColumnLayout\"\ndata:data,initialSort:true};});}LineUp.LineUpLocalStorage = LineUpLocalStorage;LineUp.createLocalStorage = function(data,columns,layout,primaryKey,storageConfig){return new LineUpLocalStorage(data,columns,layout,primaryKey,storageConfig);}; /**\n   * generate a default layout by just showing all columns with 100 px\n   * @param columns\n   * @returns {{primary: (Array|*)}}\n   */LineUpLocalStorage.generateDefaultLayout = function(columns){var layout=columns.map(function(c){return {column:c.column,width:c instanceof LineUp.LineUpStringColumn?200:100};});return {primary:layout};};LineUpLocalStorage.prototype = $.extend({},{}, /** @lends LineUpLocalStorage.prototype */{getRawColumns:function getRawColumns(){return this.rawcols;},getColumnLayout:function getColumnLayout(key){var _key=key || \"primary\";if(this.bundles[_key].needsLayout){this.generateLayout(this.layout,_key);this.bundles[_key].needsLayout = false;}return this.bundles[_key].layoutColumns;},isSelected:function isSelected(row){return this.selected.has(row[this.primaryKey]);},select:function select(row){this.selected.add(row[this.primaryKey]);},selectAll:function selectAll(rows){var that=this;rows.forEach(function(row){that.selected.add(row[that.primaryKey]);});},setSelection:function setSelection(rows){this.clearSelection();this.selectAll(rows);},deselect:function deselect(row){this.selected.remove(row[this.primaryKey]);},selectedRows:function selectedRows(){return this.rawdata.filter(this.isSelected.bind(this));},clearSelection:function clearSelection(){this.selected = d3.set();}, /**\n       *  get the data\n       *  @returns data\n       */getData:function getData(bundle){bundle = bundle || \"primary\";return this.bundles[bundle].data;},filterData:function filterData(columns){var flat=[];columns.forEach(function(d){d.flattenMe(flat);});flat = flat.filter(function(d){return d.isFiltered();});if($.isFunction(this.config.filter.filter)){flat.push(this.config.filter.filter);}if(flat.length === 0){return this.rawdata;}else {return this.rawdata.filter(function(row){return flat.every(function(f){return f.filterBy(row);});});}},resortData:function resortData(spec){var _key=spec.key || 'primary',that=this;var bundle=this.bundles[_key];var asc=spec.asc || this.config.columnBundles[_key].sortingOrderAsc;var column=spec.column || this.config.columnBundles[_key].sortedColumn; //console.log('resort: ', spec);\nvar cols=this.getColumnLayout(_key);bundle.data = this.filterData(cols);if(spec.filteredChanged || bundle.initialSort){ //trigger column updates\nvar flat=[];cols.forEach(function(d){d.flattenMe(flat);});flat.forEach(function(col){col.prepare(bundle.data,that.config.renderingOptions.histograms);});bundle.initialSort = false;}var primary=this.primaryKey;function sort(a,b){var r=column.sortBy(a,b);if(r === 0 || isNaN(r)){ //by default sort by primary key\nreturn d3.ascending(a[primary],b[primary]);}return asc?-r:r;}if(column){bundle.data.sort(sort);}var start=this.config.filter.skip?this.config.filter.skip:0;if(this.config.filter.limit && isFinite(this.config.filter.limit)){bundle.data = bundle.data.slice(start,start + this.config.filter.limit);}else {bundle.data = bundle.data.slice(start);}var rankColumn=bundle.layoutColumns.filter(function(d){return d instanceof LineUp.LayoutRankColumn;});if(rankColumn.length > 0){var accessor=function accessor(d,i){return i;};if(column){accessor = function(d){return column.getValue(d);};}this.assignRanks(bundle.data,accessor,rankColumn);}}, /*\n       * assigns the ranks to the data which is expected to be sorted in decreasing order\n       * */assignRanks:function assignRanks(data,accessor,rankColumns){var actualRank=1;var actualValue=-1;data.forEach(function(row,i){if(actualValue === -1){actualValue = accessor(row,i);}if(actualValue !== accessor(row,i)){actualRank = i + 1; //we have 1,1,3, not 1,1,2\nactualValue = accessor(row,i);}rankColumns.forEach(function(r){r.setValue(row,actualRank);});});},generateLayout:function generateLayout(layout,bundle){var _bundle=bundle || 'primary'; // create Rank Column\n//            new LayoutRankColumn();\nvar b=this.bundles[_bundle];b.layoutColumns = layout[_bundle].map(this.storageConfig.toLayoutColumn); //console.log(b.layoutColumns, layout);\n//if there is no rank column create one\nif(b.layoutColumns.filter(function(d){return d instanceof LineUp.LayoutRankColumn;}).length < 1){b.layoutColumns.unshift(new LineUp.LayoutRankColumn(null,null,null,this));} //if we have row actions and no action column create one\nif(this.config.svgLayout.rowActions.length > 0 && b.layoutColumns.filter(function(d){return d instanceof LineUp.LayoutActionColumn;}).length < 1){b.layoutColumns.push(new LineUp.LayoutActionColumn());} //set layout bundle reference\nb.layoutColumns.forEach(bundleSetter(_bundle));},addColumn:function addColumn(col,bundle,position){var _bundle=bundle || 'primary';var cols=this.bundles[_bundle].layoutColumns,i,c; //insert the new column after the first non rank, text column\nif(typeof position === 'undefined' || position === null){for(i = 0;i < cols.length;++i) {c = cols[i];if(c instanceof LineUp.LayoutRankColumn || c instanceof LineUp.LayoutStringColumn){continue;}break;}}else {if(position < 0){position = cols.length + 1 + position;}i = Math.max(0,Math.min(cols.length,position));}col.columnBundle = _bundle;cols.splice(i,0,col);},addStackedColumn:function addStackedColumn(spec,position,bundle){var _spec=$.extend({type:'stacked',label:'Stacked',children:[]},spec);this.addColumn(this.storageConfig.toLayoutColumn(_spec),bundle,position);},addSingleColumn:function addSingleColumn(spec,position,bundle){this.addColumn(this.storageConfig.toLayoutColumn(spec),bundle,position);},removeColumn:function removeColumn(col){var headerColumns=this.bundles[col.columnBundle].layoutColumns;if(col instanceof LineUp.LayoutStackedColumn){var indexOfElement=_.indexOf(headerColumns,col); //function(c){ return (c.id == d.id)});\nif(indexOfElement !== undefined){var addColumns=[]; //                d.children.forEach(function(ch){\n//\n//                    // if there is NO column of same data type\n//                   if (headerColumns.filter(function (hc) {return hc.getDataID() == ch.getDataID()}).length ==0){\n//                       ch.parent=null;\n//                       addColumns.push(ch);\n//                   }\n//\n//                })\n//                headerColumns.splice(indexOfElement,1,addColumns)\nArray.prototype.splice.apply(headerColumns,[indexOfElement,1].concat(addColumns));}}else if(col.column){if(col.parent === null || col.parent === undefined){headerColumns.splice(headerColumns.indexOf(col),1);}else {col.parent.removeChild(col);this.resortData({});}}},moveColumn:function moveColumn(column,targetColumn,position){var sourceColumns=this.bundles[column.columnBundle].layoutColumns,targetColumns=this.bundles[targetColumn.columnBundle].layoutColumns,targetIndex; // different cases:\nif(column.parent == null && targetColumn.parent == null){ // simple L1 Column movement:\nsourceColumns.splice(sourceColumns.indexOf(column),1);targetIndex = targetColumns.indexOf(targetColumn);if(position === 'r'){targetIndex++;}targetColumns.splice(targetIndex,0,column);}else if(column.parent !== null && targetColumn.parent === null){ // move from stacked Column\ncolumn.parent.removeChild(column);targetIndex = targetColumns.indexOf(targetColumn);if(position === 'r'){targetIndex++;}targetColumns.splice(targetIndex,0,column);}else if(column.parent === null && targetColumn.parent !== null){ // move into stacked Column\nif(targetColumn.parent.addChild(column,targetColumn,position)){sourceColumns.splice(sourceColumns.indexOf(column),1);}}else if(column.parent !== null && targetColumn.parent !== null){ // move from Stacked into stacked Column\ncolumn.parent.removeChild(column);targetColumn.parent.addChild(column,targetColumn,position);}bundleSetter(targetColumn.columnBundle)(column);this.resortData({});},copyColumn:function copyColumn(column,targetColumn,position){var targetColumns=this.bundles[targetColumn.columnBundle].layoutColumns;var newColumn=column.makeCopy();bundleSetter(targetColumn.columnBundle)(newColumn); // different cases:\nif(targetColumn.parent == null){var targetIndex=targetColumns.indexOf(targetColumn);if(position === 'r'){targetIndex++;}targetColumns.splice(targetIndex,0,newColumn);}else if(targetColumn.parent !== null){ // copy into stacked Column\ntargetColumn.parent.addChild(newColumn,targetColumn,position);}this.resortData({});}, /**\n       * returns a column by name\n       * @param name\n       * @returns {*}\n       */getColumnByName:function getColumnByName(name){var cols=this.getColumnLayout();for(var i=cols.length - 1;i >= 0;--i) {var col=cols[i];if(col.getLabel() === name || col.column && col.column.column === name){return col;}}return null;}});})(LineUp || (LineUp = {}),d3,jQuery,_); /* global d3, jQuery, document */var LineUp;(function(LineUp,d3,$,undefined){LineUp.prototype = LineUp.prototype || {};LineUp.updateClipPaths = function(headers,svg,prefix,shift,defclass){defclass = defclass || 'column'; //generate clip paths for the text columns to avoid text overflow\n//see http://stackoverflow.com/questions/11742812/cannot-select-svg-foreignobject-element-in-d3\n//there is a bug in webkit which present camelCase selectors\nvar textClipPath=svg.select('defs.' + defclass).selectAll(function(){return this.getElementsByTagName('clipPath');}).data(headers,function(d){return d.id;});textClipPath.enter().append('clipPath').attr('id',function(d){return 'clip-' + prefix + d.id;}).append('rect').attr({y:0,height:'1000'});textClipPath.exit().remove();textClipPath.select('rect').attr({x:function x(d){return shift?d.offsetX:null;},width:function width(d){return Math.max(d.getColumnWidth() - 5,0);}});};function updateText(allHeaders,allRows,svg,config){ // -- the text columns\nvar allTextHeaders=allHeaders.filter(function(d){return d instanceof LineUp.LayoutCategoricalColumn || d instanceof LineUp.LayoutStringColumn || d instanceof LineUp.LayoutRankColumn;});var rowCenter=config.svgLayout.rowHeight / 2;var textRows=allRows.selectAll('.tableData.text').data(function(d){var dd=allTextHeaders.map(function(column){return {value:column.getValue(d),label:column.getValue(d,'raw'),offsetX:column.offsetX,columnW:column.getColumnWidth(),isRank:column instanceof LineUp.LayoutRankColumn,clip:'url(#clip-B' + column.id + ')'};});return dd;});textRows.enter().append('text').attr({'class':function _class(d){return 'tableData text' + (d.isRank?' rank':'');},y:rowCenter,'clip-path':function clipPath(d){return d.clip;}});textRows.exit().remove();textRows.attr('x',function(d){return d.offsetX;}).attr({ // ATS: Added this fix to for updated text rows, they weren't getting updated clip paths\n'clip-path':function clipPath(d){return d.clip;}}).text(function(d){return d.label;});allRows.selectAll('.tableData.text.rank').text(function(d){return d.label;}); // only changed texts:\n///// TODO ---- IMPORTANT  ----- DO NOT DELETE\n//            data.push({key:'rank',value:d['rank']});// TODO: use Rank column\n//    allRows.selectAll('.tableData.text.rank')\n//        .data(function(d){\n////            console.log(d);\n//            return [{key:'rank',value:d['rank']}]\n//        }\n//    )\n}function updateCategorical(allHeaders,allRows,svg,config){ // -- the text columns\nvar allTextHeaders=allHeaders.filter(function(d){return d instanceof LineUp.LayoutCategoricalColorColumn;});var icon=config.svgLayout.rowHeight - config.svgLayout.rowBarPadding * 2;var textRows=allRows.selectAll('.tableData.cat').data(function(d){var dd=allTextHeaders.map(function(column){return {value:column.getValue(d),label:column.getValue(d,'raw'),offsetX:column.offsetX,columnW:column.getColumnWidth(),color:column.getColor(d),clip:'url(#clip-B' + column.id + ')'};});return dd;});textRows.enter().append('rect').attr({'class':'tableData cat',y:config.svgLayout.rowBarPadding,height:config.svgLayout.rowHeight - config.svgLayout.rowBarPadding * 2,width:icon}).append('title');textRows.exit().remove();textRows.attr('x',function(d){return d.offsetX + 2;}).style('fill',function(d){return d.color;}).select('title').text(function(d){return d.label;});}function showStacked(config){ //if not enabled or values are shown\nif(!config.renderingOptions.stacked || config.renderingOptions.values){return false;} //primary is a stacked one\nvar current=config.columnBundles.primary.sortedColumn;return !(current && current.parent instanceof LineUp.LayoutStackedColumn);}function updateSingleBars(headers,allRows,config){ // -- handle the Single columns  (!! use unflattened headers for filtering)\nvar allSingleBarHeaders=headers.filter(function(d){return d.column instanceof LineUp.LineUpNumberColumn;});var barRows=allRows.selectAll('.tableData.bar').data(function(d){var data=allSingleBarHeaders.map(function(column){return {key:column.getDataID(),value:column.getWidth(d),label:column.column.getRawValue(d),offsetX:column.offsetX};});return data;});barRows.enter().append('rect').attr({'class':'tableData bar',y:config.svgLayout.rowBarPadding,height:config.svgLayout.rowHeight - config.svgLayout.rowBarPadding * 2});barRows.exit().remove();barRows.attr({x:function x(d){return d.offsetX;},width:function width(d){return Math.max(+d.value - 2,0);}}).style({fill:function fill(d){return config.colorMapping.get(d.key);}});}function updateStackBars(headers,allRows,_stackTransition,config){ // -- RENDER the stacked columns (update, exit, enter)\nvar allStackedHeaders=headers.filter(function(d){return d instanceof LineUp.LayoutStackedColumn;}); // -- render StackColumnGroups\nvar stackRows=allRows.selectAll('.tableData.stacked').data(function(d){var dd=allStackedHeaders.map(function(column){return {key:column.getDataID(),childs:column.children,parent:column,row:d};});return dd;});stackRows.exit().remove();stackRows.enter().append('g').attr('class','tableData stacked');stackRows.attr('transform',function(d){return 'translate(' + d.parent.offsetX + ',' + 0 + ')';}); // -- render all Bars in the Group\nvar allStackOffset=0;var allStackW=0;var allStackRes={};var asStacked=showStacked(config);var allStack=stackRows.selectAll('rect').data(function(d){allStackOffset = 0;allStackW = 0;return d.childs.map(function(child){allStackW = child.getWidth(d.row);allStackRes = {child:child,width:allStackW,offsetX:allStackOffset};if(asStacked){allStackOffset += allStackW;}else {allStackOffset += child.getColumnWidth();}return allStackRes;});});allStack.exit().remove();allStack.enter().append('rect').attr({y:config.svgLayout.rowBarPadding,height:config.svgLayout.rowHeight - config.svgLayout.rowBarPadding * 2});(_stackTransition?allStack.transition(config.svgLayout.animationDuration):allStack).attr({x:function x(d){return d.offsetX;},width:function width(d){return d.width > 2?d.width - 2:d.width;}}).style({fill:function fill(d){return config.colorMapping.get(d.child.getDataID());}});}function createActions($elem,item,config){var $r=$elem.selectAll('text').data(config.svgLayout.rowActions);$r.enter().append('text').append('title');$r.exit().remove();$r.attr('x',function(d,i){return i * config.svgLayout.rowHeight;}).text(function(d){return d.icon;}).on('click',function(d){d.action.call(this,item.data,d);}).select('title').text(function(d){return d.name;});}function updateActionBars(headers,allRows,config){ // -- handle the Single columns  (!! use unflattened headers for filtering)\nvar allActionBarHeaders=headers.filter(function(d){return d instanceof LineUp.LayoutActionColumn;});var actionRows=allRows.selectAll('.tableData.action').data(function(d){var dd=allActionBarHeaders.map(function(column){return {key:column.getDataID(),value:column.getColumnWidth(d),data:d,offsetX:column.offsetX};});return dd;});actionRows.enter().append('g').attr('class','tableData action').each(function(item){createActions(d3.select(this),item,config);});actionRows.exit().remove();actionRows.attr('transform',function(d){return 'translate(' + (d.offsetX + 10) + ',' + (config.svgLayout.rowHeight * 0.5 + 1) + ')';});}function createRepr(col,row){var r=col.getValue(row,'raw');if(col instanceof LineUp.LayoutNumberColumn || col instanceof LineUp.LayoutStackedColumn){r = isNaN(r) || r.toString() === ''?'':+r;}return r;}function generateTooltip(row,headers,config){var $table=$('<div><table><thead><tr><th>Column</th><th>Value</th></tr></thead><tbody></tbody></table></div>');var $body=$table.find('tbody');headers.forEach(function(header){var r=createRepr(header,row);if(typeof r === 'undefined'){r = '';}else if(typeof r === 'number'){r = config.numberformat(r);}$('<tr><th>' + header.getLabel() + '</th><td>' + r + '</td></tr>').appendTo($body);});return $table.html();} /**\n  * select one or more rows\n  * @param row\n */LineUp.prototype.select = function(row){var primaryKey=this.storage.primaryKey,$rows=this.$body.selectAll('.row');if(Array.isArray(row)){this.storage.setSelection(row);row = row.map(function(d){return d[primaryKey];});$rows.classed('selected',function(d){return row.indexOf(d[primaryKey]) > 0;});}else if(row){this.storage.setSelection([row]);$rows.classed('selected',function(d){return d[primaryKey] === row[primaryKey];});}else {this.storage.clearSelection();$rows.classed('selected',false);}}; /**\n   * updates the table body\n   * @param headers - the headers as in {@link updateHeader}\n   * @param data - the data array from {@link LineUpLocalStorage.prototype#getData()}\n   */LineUp.prototype.updateBody = function(headers,data,stackTransition){if(Array.isArray(headers) && headers.length === 0){return;} //default values\nheaders = headers || this.storage.getColumnLayout();data = data || this.storage.getData(headers[0].columnBundle);stackTransition = stackTransition || false;var svg=this.$body;var that=this;var primaryKey=this.storage.primaryKey;var zeroFormat=d3.format('.1f');var bundle=this.config.columnBundles[headers[0].columnBundle]; //console.log('bupdate');\nstackTransition = stackTransition || false;var allHeaders=[];headers.forEach(function(d){d.flattenMe(allHeaders);});var datLength=data.length,rawData=data;var rowScale=d3.scale.ordinal().domain(data.map(function(d){return d[primaryKey];})).rangeBands([0,datLength * that.config.svgLayout.rowHeight],0,that.config.svgLayout.rowPadding),prevRowScale=bundle.prevRowScale || rowScale; //backup the rowscale from the previous call to have a previous 'old' position\nbundle.prevRowScale = rowScale;var headerShift=0;if(that.config.svgLayout.mode === 'combined'){headerShift = that.config.htmlLayout.headerHeight;}this.$bodySVG.attr('height',datLength * that.config.svgLayout.rowHeight + headerShift);var visibleRange=this.selectVisible(data,rowScale);if(visibleRange[0] > 0 || visibleRange[1] < data.length){data = data.slice(visibleRange[0],visibleRange[1]);} // -- handle all row groups\nvar allRowsSuper=svg.selectAll('.row').data(data,function(d){return d[primaryKey];});allRowsSuper.exit().remove(); // --- append ---\nvar allRowsSuperEnter=allRowsSuper.enter().append('g').attr({'class':'row',transform:function transform(d){ //init with its previous position\nvar prev=prevRowScale(d[primaryKey]);if(typeof prev === 'undefined'){ //if not defined from the bottom\nprev = rowScale.range()[1];}return 'translate(' + 0 + ',' + prev + ')';}});allRowsSuperEnter.append('rect').attr({'class':'filler',width:'100%',height:that.config.svgLayout.rowHeight}); //    //--- update ---\n(this.config.renderingOptions.animation?allRowsSuper.transition().duration(this.config.svgLayout.animationDuration):allRowsSuper).attr({'transform':function transform(d){return 'translate(' + 0 + ',' + rowScale(d[primaryKey]) + ')';}});var asStacked=showStacked(this.config);function createOverlays(row){var textOverlays=[];function toValue(v){if(isNaN(v) || v === '' || typeof v === 'undefined'){return '';}return that.config.numberformat(+v);}headers.forEach(function(col){if(col.column instanceof LineUp.LineUpNumberColumn){textOverlays.push({id:col.id,value:col.getValue(row),label:that.config.numberformat(+col.getValue(row,'raw')),x:col.offsetX,w:col.getColumnWidth()});}else if(col instanceof LineUp.LayoutStackedColumn){var allStackOffset=0;col.children.forEach(function(child){var allStackW=child.getWidth(row);textOverlays.push({id:child.id,label:toValue(child.getValue(row,'raw')) + ' -> (' + zeroFormat(child.getWidth(row)) + ')',w:asStacked?allStackW:child.getColumnWidth(),x:allStackOffset + col.offsetX});if(asStacked){allStackOffset += allStackW;}else {allStackOffset += child.getColumnWidth();}});}});return textOverlays;}function renderOverlays($row,textOverlays,clazz,clipPrefix){$row.selectAll('text.' + clazz).data(textOverlays).enter().append('text').attr({'class':'tableData ' + clazz,x:function x(d){return d.x;},y:that.config.svgLayout.rowHeight / 2,'clip-path':function clipPath(d){return 'url(#clip-' + clipPrefix + d.id + ')';}}).text(function(d){return d.label;});}allRowsSuper.on({mouseenter:function mouseenter(row){var $row=d3.select(this);$row.classed('hover',true); //            d3.select(this.parent).classed('hovered', true)\nvar textOverlays=createOverlays(row); //create clip paths which clips the overlay text of the bars\nvar shift=rowScale(row[primaryKey]); //generate clip paths for the text columns to avoid text overflow\n//see http://stackoverflow.com/questions/11742812/cannot-select-svg-foreignobject-element-in-d3\n//there is a bug in webkit which present camelCase selectors\nvar textClipPath=that.$bodySVG.select('defs.overlay').selectAll(function(){return this.getElementsByTagName('clipPath');}).data(textOverlays);textClipPath.enter().append('clipPath').append('rect').attr({height:'1000'});textClipPath.exit().remove();textClipPath.attr('y',shift).attr('id',function(d){return 'clip-M' + d.id;});textClipPath.select('rect').attr({x:function x(d){return d.x;},width:function width(d){return Math.max(d.w - 2,0);}});renderOverlays($row,textOverlays,'hoveronly','M');function absoluteRowPos(elem){var scrollTop=document.documentElement.scrollTop || document.body.scrollTop;var matrix=elem.getScreenCTM(),tbbox=elem.getBBox(),point=that.$bodySVG.node().createSVGPoint();point.x = tbbox.x;point.y = tbbox.y;point = point.matrixTransform(matrix);return scrollTop + point.y;}if(that.config.interaction.tooltips){that.tooltip.show(generateTooltip(row,allHeaders,that.config),{x:d3.event.x + 10,y:absoluteRowPos(this),height:that.config.svgLayout.rowHeight});}that.hoverHistogramBin(row);that.listeners['hover'](row,shift);},mousemove:function mousemove(){if(that.config.interaction.tooltips){that.tooltip.move({x:d3.event.x});}},mouseleave:function mouseleave(){if(that.config.interaction.tooltips){that.tooltip.hide();}that.hoverHistogramBin(null);that.listeners['hover'](null);d3.select(this).classed('hover',false);d3.select(this).selectAll('text.hoveronly').remove();},click:function click(row){var $row=d3.select(this),selected=that.storage.isSelected(row);if(that.config.interaction.multiselect(d3.event)){var allselected=that.storage.selectedRows();if(selected){$row.classed('selected',false);that.storage.deselect(row);if(allselected.length === 1){ //remove the last one\nthat.listeners['selected'](null);} // ATS: Fix, was not removing the deselected one from the allselected list\nallselected.splice(allselected.indexOf(row),1);}else {$row.classed('selected',true);that.storage.select(row);if(that.config.interaction.rangeselect(d3.event) && allselected.length === 1){ //select a range\nvar i=rawData.indexOf(row),j=rawData.indexOf(allselected[0]);if(i < j){allselected = rawData.slice(i,j + 1);}else {allselected = rawData.slice(j,i + 1);}var toSelect=allRowsSuper.filter(function(d){return allselected.indexOf(d) >= 0;}).classed('selected',true).data();that.storage.selectAll(toSelect);}else {allselected.push(row);}if(allselected.length === 1){ //remove the last one\nthat.listeners['selected'](row,null);}}that.listeners['multiselected'](allselected);}else {if(selected){$row.classed('selected',false);that.storage.deselect(row);that.listeners['selected'](null);that.listeners['multiselected']([]);}else {var prev=allRowsSuper.filter('.selected').classed('selected',false);prev = prev.empty?null:prev.datum();$row.classed('selected',true);that.storage.setSelection([row]);that.listeners['selected'](row,prev);that.listeners['multiselected']([row]);}}}});var allRows=allRowsSuper;updateSingleBars(headers,allRows,that.config);updateStackBars(headers,allRows,this.config.renderingOptions.animation && stackTransition,that.config);updateActionBars(headers,allRows,that.config);LineUp.updateClipPaths(allHeaders,this.$bodySVG,'B',true);updateText(allHeaders,allRows,svg,that.config);updateCategorical(allHeaders,allRows,svg,that.config);if(that.config.renderingOptions.values){allRowsSuper.classed('values',true);allRowsSuper.each(function(row){var $row=d3.select(this);renderOverlays($row,createOverlays(row),'valueonly','B');});}else {allRowsSuper.classed('values',false).selectAll('text.valueonly').remove();} //update selections state\nallRowsSuper.classed('selected',function(d){return that.storage.isSelected(d);});};})(LineUp || (LineUp = {}),d3,jQuery); /* global d3, jQuery */var LineUp;(function(LineUp,d3,$,undefined){LineUp.prototype = LineUp.prototype || {};LineUp.prototype.layoutHeaders = function(headers){var offset=0;var config=this.config,headerHeight=config.htmlLayout.headerHeight,headerOffset=config.htmlLayout.headerOffset;headers.forEach(function(d){ //        console.log(d);\nd.offsetX = offset;d.offsetY = headerOffset;d.height = headerHeight - headerOffset * 2;offset += d.getColumnWidth(); //        console.log(d.getColumnWidth());\n}); //console.log(\"layout Headers:\", headers);\n//update all the plusSigns shifts\nvar shift=offset + 4;d3.values(config.svgLayout.plusSigns).forEach(function(addSign){addSign.x = shift;shift += addSign.w + 4;});headers.filter(function(d){return d instanceof LineUp.LayoutStackedColumn;}).forEach(function(d){d.height = headerHeight / 2 - headerOffset * 2;var localOffset=0;var parentOffset=d.offsetX;var allChilds=d.children.concat(d.emptyColumns);allChilds.map(function(child){child.offsetX = parentOffset + localOffset;child.localOffsetX = localOffset;localOffset += child.getColumnWidth();child.offsetY = headerHeight / 2 + headerOffset;child.height = headerHeight / 2 - headerOffset * 2;});});this.totalWidth = shift;}; /**\n   * Render the given headers\n   * @param headers - the array of headers, see {@link LineUpColumn}\n   */LineUp.prototype.updateHeader = function(headers){if(Array.isArray(headers) && headers.length === 0){return;}headers = headers || this.storage.getColumnLayout(); //    console.log('update Header');\nvar rootsvg=this.$header;var svg=rootsvg.select('g.main');var that=this;var config=this.config;if(this.headerUpdateRequired){this.layoutHeaders(headers);this.$headerSVG.attr('width',this.totalWidth);this.$bodySVG.attr('width',this.totalWidth);this.headerUpdateRequired = false;}var allHeaderData=[];headers.forEach(function(d){d.flattenMe(allHeaderData,{addEmptyColumns:true});}); //reverse order to render from right to left\nallHeaderData.reverse();LineUp.updateClipPaths(allHeaderData,this.$headerSVG,'H',false,'columnheader'); //console.log(allHeaderData);\n// -- Handle the header groups (exit,enter, update)\nvar allHeaders=svg.selectAll('.header').data(allHeaderData,function(d){return d.id;});allHeaders.exit().remove(); // --- adding Element to class allHeaders\nvar allHeadersEnter=allHeaders.enter().append('g').attr('class','header').classed('emptyHeader',function(d){return d instanceof LineUp.LayoutEmptyColumn || d instanceof LineUp.LayoutActionColumn;}).classed('nestedHeader',function(d){return d && d.parent instanceof LineUp.LayoutStackedColumn;}).call(function(){that.addResortDragging(this,config);}); // --- changing nodes for allHeaders\nallHeaders.attr('transform',function(d){return 'translate(' + d.offsetX + ',' + d.offsetY + ')';}); // -- handle BackgroundRectangles\nallHeadersEnter.append('rect').attr({'class':'labelBG',y:0}).style('fill',function(d){if(d instanceof LineUp.LayoutEmptyColumn){return 'lightgray';}else if(d.column && config.colorMapping.has(d.column.id)){return config.colorMapping.get(d.column.id);}else {return config.grayColor;}}).on('click',function(d){if(d3.event.defaultPrevented || d instanceof LineUp.LayoutEmptyColumn || d instanceof LineUp.LayoutActionColumn){return;} // no sorting for empty stacked columns !!!\nif(d instanceof LineUp.LayoutStackedColumn && d.children.length < 1){return;}var bundle=config.columnBundles[d.columnBundle]; // TODO: adapt to comparison mode !!\n//same sorting swap order\nif(bundle.sortedColumn !== null && d === bundle.sortedColumn){bundle.sortingOrderAsc = !bundle.sortingOrderAsc;}else {bundle.sortingOrderAsc = d instanceof LineUp.LayoutStringColumn || d instanceof LineUp.LayoutCategoricalColumn || d instanceof LineUp.LayoutRankColumn;}bundle.sortedColumn = d;that.listeners['change-sortcriteria'](this,d,bundle.sortingOrderAsc);that.storage.resortData({column:d,asc:bundle.sortingOrderAsc});that.updateAll(false);});allHeaders.select('.labelBG').attr({width:function width(d){return d.getColumnWidth() - 5;},height:function height(d){return d.height;}});allHeadersEnter.append('g').attr('class','hist');var allNumberHeaders=allHeaders.filter(function(d){return d instanceof LineUp.LayoutNumberColumn;});if(this.config.renderingOptions.histograms){allNumberHeaders.selectAll('g.hist').each(function(d){var $this=d3.select(this).attr('transform','scale(1,' + d.height + ')');var h=d.hist;if(!h){return;}var s=d.value2pixel.copy().range([0,d.value2pixel.range()[1] - 5]);var $hist=$this.selectAll('rect').data(h);$hist.enter().append('rect');$hist.attr({x:function x(bin){return s(bin.x);},width:function width(bin){return s(bin.dx);},y:function y(bin){return 1 - bin.y;},height:function height(bin){return bin.y;}});});}else {allNumberHeaders.selectAll('g.hist').selectAll('*').remove();} // -- handle WeightHandle\nif(this.config.manipulative){allHeadersEnter.filter(function(d){return !(d instanceof LineUp.LayoutEmptyColumn) && !(d instanceof LineUp.LayoutActionColumn);}).append('rect').attr({'class':'weightHandle',x:function x(d){return d.getColumnWidth() - 5;},y:0,width:5});allHeaders.select('.weightHandle').attr({x:function x(d){return d.getColumnWidth() - 5;},height:function height(d){return d.height;}}).call(this.dragWeight); // TODO: adopt dragWeight function !\n} // -- handle Text\nallHeadersEnter.append('text').attr({'class':'headerLabel',x:config.htmlLayout.labelLeftPadding});allHeadersEnter.append('title');allHeaders.select('.headerLabel').classed('sortedColumn',function(d){var sc=config.columnBundles[d.columnBundle].sortedColumn;return sc === d;}).attr({y:function y(d){if(d instanceof LineUp.LayoutStackedColumn || d.parent != null){return d.height / 2;}return d.height * 3 / 4;},'clip-path':function clipPath(d){return 'url(#clip-H' + d.id + ')';}}).text(function(d){return d.getLabel();});allHeaders.select('title').text(function(d){return d.getLabel();}); // -- handle the Sort Indicator\nallHeadersEnter.append('text').attr({'class':'headerSort',y:function y(d){return d.height / 2;},x:2});allHeaders.select('.headerSort').text(function(d){var sc=config.columnBundles[d.columnBundle].sortedColumn;return sc === d?config.columnBundles[d.columnBundle].sortingOrderAsc?'':'':'';}).attr({y:function y(d){return d.height / 2;}}); // add info Button to All Stacked Columns\nif(this.config.manipulative){var buttons=[{'class':'stackedColumnInfo',text:'',filter:function filter(d){return d instanceof LineUp.LayoutStackedColumn?[d]:[];},action:function action(d){that.stackedColumnOptionsGui(d);}},{'class':'singleColumnDelete',text:'',filter:function filter(d){return d instanceof LineUp.LayoutStackedColumn || d instanceof LineUp.LayoutEmptyColumn || d instanceof LineUp.LayoutActionColumn?[]:[d];},action:function action(d){that.storage.removeColumn(d);that.headerUpdateRequired = true;that.updateAll();}},{'class':'singleColumnFilter',text:'',filter:function filter(d){return d.column?[d]:[];},offset:config.htmlLayout.buttonWidth,action:function action(d){if(d instanceof LineUp.LayoutStringColumn){that.openFilterPopup(d,d3.select(this));}else if(d instanceof LineUp.LayoutCategoricalColumn){that.openCategoricalFilterPopup(d,d3.select(this));}else if(d instanceof LineUp.LayoutNumberColumn){that.openMappingEditor(d,d3.select(this));}}}];buttons.forEach(function(button){var $button=allHeaders.selectAll('.' + button['class']).data(button.filter);$button.exit().remove();$button.enter().append('text').attr('class','fontawe ' + button['class']).text(button.text).on('click',button.action);$button.attr({x:function x(d){return d.getColumnWidth() - config.htmlLayout.buttonRightPadding - (button.offset || 0);},y:config.htmlLayout.buttonTopPadding});});} // ==================\n// -- Render add ons\n//===================\n// add column signs:\nvar plusButton=d3.values(config.svgLayout.plusSigns);var addColumnButton=svg.selectAll('.addColumnButton').data(plusButton);addColumnButton.exit().remove();var addColumnButtonEnter=addColumnButton.enter().append('g').attr({'class':'addColumnButton'});addColumnButton.attr({'transform':function transform(d){return 'translate(' + d.x + ',' + d.y + ')';}});addColumnButtonEnter.append('rect').attr({x:0,y:0,rx:5,ry:5,width:function width(d){return d.w;},height:function height(d){return d.h;}}).on('click',function(d){if($.isFunction(d.action)){d.action.call(that,d);}else {that[d.action](d);}});addColumnButtonEnter.append('text').attr({x:function x(d){return d.w / 2;},y:function y(d){return d.h / 2;}}).text('');};LineUp.prototype.hoverHistogramBin = function(row){if(!this.config.renderingOptions.histograms){return;}var $hists=this.$header.selectAll('g.hist');$hists.selectAll('rect').classed('hover',false);if(row){this.$header.selectAll('g.hist').each(function(d){if(d instanceof LineUp.LayoutNumberColumn && d.hist){var bin=d.binOf(row);if(bin >= 0){d3.select(this).select('rect:nth-child(' + (bin + 1) + ')').classed('hover',true);}}});}}; // ===============\n// Helperfunctions\n// ===============\nLineUp.prototype.addResortDragging = function(xss){if(!this.config.manipulative){return;}var x=d3.behavior.drag(),that=this,rootsvg=this.$header,svgOverlay=rootsvg.select('g.overlay'),hitted=null,moved=false;x.call(xss);function dragstart(d){if(d instanceof LineUp.LayoutEmptyColumn){return;}d3.event.sourceEvent.stopPropagation(); // silence other listeners\nd3.select(this).classed('dragObject',true);hitted = null;moved = false;}function dragmove(d){if(d instanceof LineUp.LayoutEmptyColumn){return;}moved = true;var dragHeader=svgOverlay.selectAll('.dragHeader').data([d]);var dragHeaderEnter=dragHeader.enter().append('g').attr({'class':'dragHeader'});dragHeaderEnter.append('rect').attr({'class':'labelBG',width:function width(d){return d.getColumnWidth();},height:function height(d){return d.height;}});var x=d3.event.x;var y=d3.event.y;dragHeader.attr('transform',function(){return 'translate(' + (d3.event.x + 3) + ',' + (d3.event.y - 10) + ')';});var allHeaderData=[];that.storage.getColumnLayout().forEach(function(d){d.flattenMe(allHeaderData,{addEmptyColumns:true});});function contains(header,x,y){ //TODO check if types match\nif(x > header.offsetX && x - header.offsetX < header.getColumnWidth()){if(y > header.offsetY && y - header.offsetY < header.height){if(x - header.offsetX < header.getColumnWidth() / 2){return {column:header,insert:'l',tickX:header.offsetX,tickY:header.offsetY,tickH:header.height};}else {return {column:header,insert:'r',tickX:header.offsetX + header.getColumnWidth(),tickY:header.offsetY,tickH:header.height};}}}return null;}var it=0;hitted = null;while(it < allHeaderData.length && hitted == null) {hitted = contains(allHeaderData[it],x,y);it++;} //        console.log(hitted);\nvar columnTick=svgOverlay.selectAll('.columnTick').data(hitted?[hitted]:[]);columnTick.exit().remove();columnTick.enter().append('rect').attr({'class':'columnTick',width:10});columnTick.attr({x:function x(d){return d.tickX - 5;},y:function y(d){return d.tickY;},height:function height(d){return d.tickH;}});}function dragend(d){if(d3.event.defaultPrevented || d instanceof LineUp.LayoutEmptyColumn){return;}d3.select(this).classed('dragObject',false);svgOverlay.selectAll('.dragHeader').remove();svgOverlay.selectAll('.columnTick').remove();if(hitted && hitted.column === this.__data__){return;}if(hitted){ //            console.log('EVENT: ', d3.event);\nif(d3.event.sourceEvent.altKey){that.storage.copyColumn(this.__data__,hitted.column,hitted.insert);}else {that.storage.moveColumn(this.__data__,hitted.column,hitted.insert);} //            that.layoutHeaders(that.storage.getColumnLayout());\nthat.headerUpdateRequired = true;that.updateAll();}if(hitted == null && moved){that.headerUpdateRequired = true;that.storage.removeColumn(this.__data__);that.updateAll();}}x.on('dragstart',dragstart).on('drag',dragmove).on('dragend',dragend);};LineUp.prototype.addNewEmptyStackedColumn = function(){this.storage.addStackedColumn(null,-1);this.headerUpdateRequired = true;this.updateAll();}; /**\n   * called when a Header width changed, calls {@link updateHeader}\n   * @param change - the change information\n   * @param change.column - the changed column, see {@link LineUpColumn}\n   * @param change.value - the new column width\n   */LineUp.prototype.reweightHeader = function(change){ //    console.log(change);\nchange.column.setColumnWidth(change.value);this.headerUpdateRequired = true;this.updateAll();};})(LineUp || (LineUp = {}),d3,jQuery);return LineUp;} // ATS: Didn't want this, cause I don't want to bundle jquery/d3/underscore with it\n//   if (typeof define === \"function\" && define.amd) {\n//     define(['jquery','d3','underscore'], LineUpLoader);\n//   } else if (typeof module === \"object\" && module.exports) {\n//     module.exports = LineUpLoader(require('jquery'), require('d3'), require('underscore'));\n//   } else {\n//this.LineUp = LineUpLoader(jQuery, d3, _);\n//   }\nmodule.exports = LineUpLoader(jQuery,d3,_);}).call(undefined);\n\n/*****************\n ** WEBPACK FOOTER\n ** ./visuals/lineup/lib/lineup.js\n ** module id = 1\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./visuals/lineup/lib/lineup.js?");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("/**\n * A mixin that adds support for event emitting\n */\nvar EventEmitter = (function () {\n    function EventEmitter() {\n        this.listeners = {};\n    }\n    /**\n     * Adds an event listener for the given event\n     */\n    EventEmitter.prototype.on = function (name, handler) {\n        var _this = this;\n        var listeners = this.listeners[name] = this.listeners[name] || [];\n        listeners.push(handler);\n        return {\n            destroy: function () {\n                _this.off(name, handler);\n            }\n        };\n    };\n    /**\n     * Removes an event listener for the given event\n     */\n    EventEmitter.prototype.off = function (name, handler) {\n        var listeners = this.listeners[name];\n        if (listeners) {\n            var idx = listeners.indexOf(handler);\n            if (idx >= 0) {\n                listeners.splice(idx, 1);\n            }\n        }\n    };\n    /**\n     * Raises the given event\n     */\n    /*protected*/ EventEmitter.prototype.raiseEvent = function (name) {\n        var _this = this;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var listeners = this.listeners[name];\n        if (listeners) {\n            listeners.forEach(function (l) {\n                l.apply(_this, args);\n            });\n        }\n    };\n    return EventEmitter;\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = EventEmitter;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./base/EventEmitter.ts\n ** module id = 2\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./base/EventEmitter.ts?");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("function applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach(function (baseCtor) {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\nfunction Mixin(ctor) {\n    return function (me) {\n        applyMixins(me, ctor);\n    };\n}\n/**\n * Registers a visual in the power bi system\n */\nfunction Visual(config) {\n    return function (ctor) {\n        (function (powerbi) {\n            var visuals;\n            (function (visuals) {\n                var plugins;\n                (function (plugins) {\n                    var name = config.visualName + config.projectId;\n                    plugins[name] = {\n                        name: name,\n                        class: name,\n                        capabilities: ctor.capabilities,\n                        custom: true,\n                        create: function () { return new ctor(); }\n                    };\n                })(plugins = visuals.plugins || (visuals.plugins = {}));\n            })(visuals = powerbi.visuals || (powerbi.visuals = {}));\n        })(window['powerbi'] || (window['powerbi'] = {}));\n    };\n}\nexports.Visual = Visual;\n/**\n * A collection of utils\n */\nvar Utils = (function () {\n    function Utils() {\n    }\n    /**\n     * Returns if there is any more or less data in the new data\n     * @param idEquality Returns true if a and b are referring to the same object, not necessarily if it has changed\n     */\n    Utils.hasDataChanged = function (newData, oldData, equality) {\n        // If the are identical, either same array or undefined, nothing has changed\n        if (oldData === newData) {\n            return false;\n        }\n        // If only one of them is undefined or if they differ in length, then its changed\n        if (!oldData || !newData || oldData.length !== newData.length) {\n            return true;\n        }\n        // If there are any elements in newdata that arent in the old data\n        return _.any(newData, function (n) { return !_.any(oldData, function (m) { return equality(m, n); }); });\n    };\n    /**\n     * Diffs the two given lists\n     * @param existingItems The current list of items\n     * @param newItems The new set of items\n     * @param differ The interface for comparing items and add/remove events\n     * @param <M>\n     */\n    // TODO: Think about a param that indicates if should be merged into existingItems should be modified, or if only the differ should be called\n    Utils.listDiff = function (existingItems, newItems, differ) {\n        existingItems = existingItems || [];\n        newItems = newItems || [];\n        var existing;\n        var found;\n        var curr;\n        var foundItem;\n        // Go backwards so we can remove without screwing up the index\n        for (var i = existingItems.length - 1; i >= 0; i--) {\n            var existing = existingItems[i];\n            var found = false;\n            for (var j = 0; j < newItems.length; j++) {\n                var curr = newItems[j];\n                if (differ.equals(curr, existing)) {\n                    found = true;\n                }\n            }\n            if (!found) {\n                existingItems.splice(i, 1);\n                if (differ.onRemove) {\n                    differ.onRemove(existing);\n                }\n            }\n        }\n        existing = undefined;\n        // Go through the existing ones and add the missing ones\n        for (var i = newItems.length - 1; i >= 0; i--) {\n            curr = newItems[i];\n            foundItem = undefined;\n            for (var j = 0; j < existingItems.length; j++) {\n                existing = existingItems[j];\n                if (differ.equals(curr, existing)) {\n                    foundItem = existing;\n                }\n            }\n            if (!foundItem) {\n                existingItems.push(curr);\n                if (differ.onAdd) {\n                    differ.onAdd(curr);\n                }\n            }\n            else if (differ.onUpdate) {\n                differ.onUpdate(foundItem, curr);\n            }\n        }\n    };\n    return Utils;\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Utils;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./base/Utils.ts\n ** module id = 3\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./base/Utils.ts?");

/***/ }
/******/ ]);
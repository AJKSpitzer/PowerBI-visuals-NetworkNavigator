/**
 * A Data provider for a simple json array
 */
var JSONDataProvider = (function () {
    function JSONDataProvider(data, handleSort, handleFilter) {
        if (handleSort === void 0) { handleSort = true; }
        if (handleFilter === void 0) { handleFilter = true; }
        this.handleSort = handleSort;
        this.handleFilter = handleFilter;
        this.data = data;
    }
    /**
     * Determines if the dataset can be queried again
     */
    JSONDataProvider.prototype.canQuery = function (options) {
        var _this = this;
        return new Promise(function (resolve) { return resolve(options.offset < _this.data.length); });
    };
    /**
     * Runs a query against the server
     */
    JSONDataProvider.prototype.query = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var final = _this.getFilteredData(options);
            var newData = final.slice(options.offset, options.offset + options.count);
            setTimeout(function () {
                resolve({
                    results: newData,
                    count: newData.length
                });
            }, 0);
        });
    };
    ;
    /**
     * Generates a histogram for this data set
     */
    JSONDataProvider.prototype.generateHistogram = function (column, options) {
        var _this = this;
        return new Promise(function (resolve) {
            var final = _this.getFilteredData(options);
            var values = final.map(function (n) { return n[column.column]; });
            var max = d3.max(values);
            var min = d3.min(values);
            var histgenerator = d3.layout.histogram();
            histgenerator.range([min, max]);
            var histValues = histgenerator(values).map(function (bin) { return bin.y; });
            var maxHist = d3.max(histValues);
            // Make the values a percentage
            resolve(histValues.map(function (n) { return maxHist === 0 || n === 0 || _.isNaN(n) || _.isNaN(maxHist) ? 0 : n / maxHist; }));
        });
    };
    /**
     * Gets the data filtered
     */
    JSONDataProvider.prototype.getFilteredData = function (options) {
        var final = this.data.slice(0);
        if (this.handleFilter && options.query && options.query.length) {
            options.query.forEach(function (filter) {
                var filterMethod = typeof filter.value === "string" ? JSONDataProvider.checkStringFilter : JSONDataProvider.checkNumberFilter;
                final = final.filter(function (item) { return filterMethod(item, filter); });
            });
        }
        if (this.handleSort && options.sort && options.sort.length) {
            var sortItem = options.sort[0];
            var basicSort = function (aValue, bValue, asc) {
                var dir = asc ? 1 : -1;
                if (aValue == bValue) {
                    return 0;
                }
                return (aValue > bValue ? 1 : -1) * dir;
            };
            var minMax = {};
            var calcStackedValue = function (item, sortToCheck, minMax) {
                var columns = sortToCheck.stack.columns;
                if (columns) {
                    return columns.reduce(function (a, v) {
                        /**
                         * This calculates the percent that this guy is of the max value
                         */
                        var value = item[v.column];
                        value -= minMax[v.column].min;
                        value /= (minMax[v.column].max - minMax[v.column].min);
                        return a + (value * v.weight);
                    }, 0);
                }
                return 0;
            };
            final.sort(function (a, b) {
                if (sortItem.stack) {
                    var maxValues = sortItem.stack.columns.reduce(function (a, b) {
                        a[b.column] = {
                            max: d3.max(final, function (i) { return i[b.column]; }),
                            min: d3.min(final, function (i) { return i[b.column]; })
                        };
                        return a;
                    }, {});
                    return basicSort(calcStackedValue(a, sortItem, maxValues), calcStackedValue(b, sortItem, maxValues), sortItem.asc);
                }
                return basicSort(a[sortItem.column], b[sortItem.column], sortItem.asc);
            });
        }
        return final;
    };
    /**
     * A filter for string values
     */
    JSONDataProvider.checkStringFilter = function (data, filter) {
        return data[filter.column].match(new RegExp(filter.value));
    };
    /**
     * A filter for numeric values
     */
    JSONDataProvider.checkNumberFilter = function (data, filter) {
        var value = data[filter.column] || 0;
        return value >= filter.value.domain[0] && value <= filter.value.domain[1];
    };
    return JSONDataProvider;
})();
exports.JSONDataProvider = JSONDataProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSlNPTkRhdGFQcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkpTT05EYXRhUHJvdmlkZXIudHMiXSwibmFtZXMiOlsiSlNPTkRhdGFQcm92aWRlciIsIkpTT05EYXRhUHJvdmlkZXIuY29uc3RydWN0b3IiLCJKU09ORGF0YVByb3ZpZGVyLmNhblF1ZXJ5IiwiSlNPTkRhdGFQcm92aWRlci5xdWVyeSIsIkpTT05EYXRhUHJvdmlkZXIuZ2VuZXJhdGVIaXN0b2dyYW0iLCJKU09ORGF0YVByb3ZpZGVyLmdldEZpbHRlcmVkRGF0YSIsIkpTT05EYXRhUHJvdmlkZXIuY2hlY2tTdHJpbmdGaWx0ZXIiLCJKU09ORGF0YVByb3ZpZGVyLmNoZWNrTnVtYmVyRmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFFQTs7R0FFRztBQUNIO0lBR0lBLDBCQUFZQSxJQUFXQSxFQUFVQSxVQUFpQkEsRUFBVUEsWUFBa0JBO1FBQXJEQywwQkFBeUJBLEdBQXpCQSxpQkFBeUJBO1FBQUVBLDRCQUEwQkEsR0FBMUJBLG1CQUEwQkE7UUFBN0NBLGVBQVVBLEdBQVZBLFVBQVVBLENBQU9BO1FBQVVBLGlCQUFZQSxHQUFaQSxZQUFZQSxDQUFNQTtRQUMxRUEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDckJBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSxtQ0FBUUEsR0FBZkEsVUFBZ0JBLE9BQXNCQTtRQUF0Q0UsaUJBRUNBO1FBREdBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQVVBLFVBQUNBLE9BQU9BLElBQUtBLE9BQUFBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLEdBQUdBLEtBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEVBQTFDQSxDQUEwQ0EsQ0FBQ0EsQ0FBQ0E7SUFDekZBLENBQUNBO0lBRURGOztPQUVHQTtJQUNJQSxnQ0FBS0EsR0FBWkEsVUFBYUEsT0FBc0JBO1FBQW5DRyxpQkFXQ0E7UUFWR0EsTUFB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